!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("function-analytics",[],t):"object"==typeof exports?exports["function-analytics"]=t():e["function-analytics"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=13)}([function(e,t,n){"use strict";var r=n(8),o=n(16),i=Object.prototype.toString;function u(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function a(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:u,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:a,isStream:function(e){return s(e)&&a(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fetcher=void 0;var r,o=n(3),i=n(12),u=(r=n(4))&&r.__esModule?r:{default:r};function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))).parameters={},e}var n,r,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,i.Processor),n=t,(r=[{key:"get",value:function(){return(new o.Runner).getResults(this)}},{key:"setParameters",value:function(e){var t=this;return Object.keys(e).forEach(function(n){t.parameters[n]=e[n]}),this}},{key:"getDependecyFetchResults",value:function(){var e=this.dependencies.map(function(e){return(new o.Runner).getResults(e.processor)});return u.default.all(e)}},{key:"_urlParameters",get:function(){var e=this,t="";return Object.keys(this.parameters).forEach(function(n){""!==t&&(t+="&"),"string"==typeof e.parameters[n]?t+=n+"="+e.parameters[n]:Object.keys(e.parameters[n]).forEach(function(r){""!==t&&(t+="&"),t+=n+"="+r+":"+e.parameters[n][r]})}),t}},{key:"url",get:function(){throw new Error("Should implement url generation")}}])&&a(n.prototype,r),s&&a(n,s),t}();t.Fetcher=l},function(e,t,n){"use strict";var r=n(0),o=n(19),i=n(21),u=n(22),s=n(23),a=n(9),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(24);e.exports=function(e){return new Promise(function(t,f){var l=e.data,p=e.headers;r.isFormData(l)&&delete p["Content-Type"];var h=new XMLHttpRequest,d="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(e.url)||(h=new window.XDomainRequest,d="onload",y=!0,h.onprogress=function(){},h.ontimeout=function(){}),e.auth){var m=e.auth.username||"",b=e.auth.password||"";p.Authorization="Basic "+c(m+":"+b)}if(h.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h[d]=function(){if(h&&(4===h.readyState||y)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?u(h.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:e,request:h};o(t,f,r),h=null}},h.onerror=function(){f(a("Network Error",e,null,h)),h=null},h.ontimeout=function(){f(a("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var v=n(25),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;g&&(p[e.xsrfHeaderName]=g)}if("setRequestHeader"in h&&r.forEach(p,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:h.setRequestHeader(t,e)}),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){h&&(h.abort(),f(e),h=null)}),void 0===l&&(l=null),h.send(l)})}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.Runner=void 0;var r,o=a(n(4)),i=a(n(14)),u=a(n(2)),s=a(n(2));function a(e){return e&&e.__esModule?e:{default:e}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,a,f;return n=t,f=[{key:"initiateRunner",value:function(e){t.instance||(this.config=e,r=this)}}],(a=[{key:"_fetch",value:function(t,n,o){if(!r){throw Error('Configration not set please configre function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}var a={url:r.config.baseUrl+t.url,method:"get",adapter:void 0!==e?u.default:s.default};r.config.username&&r.config.password&&(a.auth={username:r.config.username,password:r.config.password}),i.default.request(a).then(function(e){n(t.performPostProcess(e.data))},function(e){o(e)})}},{key:"getResults",value:function(e){var t=this;return e._fetchers?this.getAllResults(e):new o.default(function(n,r,o){e.hasDependencies()?e.getDependecyFetchResults().then(function(){e.performPreProcess(),t._fetch(e,n,r)}).catch(function(e){console.log("Errrrrrrrrrr:",e),r()}):t._fetch(e,n,r)})}},{key:"getAllResults",value:function(e){return new o.default(function(n,r,i){var u=e.fetchers.map(function(e){return(new t).getResults(e)});return o.default.all(u).then(function(t){n(e.performPostProcess(t))}).catch(function(e){r(e)})})}},{key:"instance",get:function(){return r}},{key:"config",set:function(e){this.config=e},get:function(){return this.config}}])&&c(n.prototype,a),f&&c(n,f),t}();t.Runner=f}).call(this,n(7))},function(e,t,n){"use strict";const r=Symbol?Symbol():"__listeners";class o extends Promise{constructor(e){super((t,n)=>e(t,n,e=>{try{return this[r].forEach(t=>t(e))}catch(e){n(e)}})),this[r]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[r].push(e),this}static all(e){const t=new Array(e.length),n=e.length;let r=0;return new o((o,i,u)=>{e.forEach((e,s)=>{e.then(e=>{t[s]=e,t.proportion=++r/n,u(t),r===n&&o(t)}).catch(i)})})}static sequence(e,t){const n=[],r=e.length;let i=0;return new o((o,u,s)=>{!function a(){t.call(null,e[n.length]).then(e=>{n.push(e),n.proportion=++i/r,s(n),n.length===r?o(n):a()}).catch(u)}()})}}e.exports=o},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(18),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,a={adapter:("undefined"!=typeof XMLHttpRequest?s=n(2):void 0!==t&&(s=n(2)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(u(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){a.headers[e]={}}),r.forEach(["post","put","patch"],function(e){a.headers[e]=r.merge(i)}),e.exports=a}).call(this,n(7))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Analytics=t.AnalyticsObject=t.AnalyticsHeaders=t.AnalyticsHeader=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function a(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.AnalyticsHeader=function e(){l(this,e)};var p=function(e){function t(e){var n,r;return l(this,t),r=a(this,(n=t.__proto__||Object.getPrototypeOf(t)).call.apply(n,[this].concat(i(e)))),Object.setPrototypeOf(r,Object.create(t.prototype)),r}return c(t,Array),s(t,[{key:"getHeader",value:function(e){var t;return this.forEach(function(n,r){n.name===e&&((t=n).index=r)}),t}},{key:"dx",get:function(){return this.getHeader("dx")}},{key:"pe",get:function(){return this.getHeader("pe")}},{key:"ou",get:function(){return this.getHeader("ou")}},{key:"value",get:function(){return this.getHeader("value")}}]),t}();t.AnalyticsHeaders=p;var h=function(){function e(t){l(this,e),this._data=t}return s(e,[{key:"headers",get:function(){return new p(this._data.headers)}},{key:"metaData",get:function(){return this._data.metaData}},{key:"rows",get:function(){return this._data.rows}},{key:"height",get:function(){return this._data.height}},{key:"width",get:function(){return this._data.width}}]),e}();t.AnalyticsObject=h;var d=function(e){function t(){var e,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return l(this,t),(e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))).parameters.dimension={},e.postProcess(function(t){return e.standardizeAnalytics(t,n)}),e}return c(t,r.Fetcher),s(t,[{key:"setData",value:function(e){return this.parameters.dimension.dx=e,this}},{key:"setPeriod",value:function(e){return this.parameters.dimension.pe=e,this}},{key:"setOrgUnit",value:function(e){return this.parameters.dimension.ou=e,this}},{key:"standardizeAnalytics",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(e.count)return e;var n={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(function(e){try{var t=e;n.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{var r=this.getSanitizedAnalyticsMetadata(e.metaData,t);n.metaData=r}catch(e){console.warn("Invalid metadata object")}e.rows&&(n.rows=e.rows)}return n.height=e.height,n.width=e.width,new h(n)}},{key:"getSanitizedAnalyticsMetadata",value:function(e,t){var n={dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]};if(e){if(e.ouHierarchy&&(n.ouHierarchy=e.ouHierarchy),e.names)n.names=e.names;else if(e.items){var r={};for(var o in e.items)r[o]=e.items[o].name;n.names=r}if(e.dimensions)t?(delete n.dimensions,n.dx=e.dimensions.dx,n.ou=e.dimensions.ou,n.pe=e.dimensions.pe,n.co=e.dimensions.co):n.dimensions=e.dimensions;else{var i={};for(var u in e.dimensions)e.hasOwnProperty(u)&&"names"!==u&&(i[u]=e.dimensions[u]);t?(n.dx=i.dx,n.ou=i.ou,n.pe=i.pe,n.co=i.co):n.dimensions=i}}return n}},{key:"url",get:function(){return"analytics?"+this._urlParameters}}]),t}();t.Analytics=d},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(e){r=u}}();var a,c=[],f=!1,l=-1;function p(){f&&a&&(f=!1,a.length?c=a.concat(c):l=-1,c.length&&h())}function h(){if(!f){var e=s(p);f=!0;for(var t=c.length;t;){for(a=c,c=[];++l<t;)a&&a[l].run();l=-1,t=c.length}a=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||f||s(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(20);e.exports=function(e,t,n,o,i){var u=new Error(e);return r(u,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Processor=t.Dependency=void 0;t.Dependency=function e(t,n){o(this,e),this.processor=t,this.process=n};var i=function(){function e(){o(this,e),this.postProcessors=[],this.dependencies=[]}var t,n,i;return t=e,(n=[{key:"hasDependencies",value:function(){return this.dependencies.length>0}},{key:"preProcess",value:function(e){return this.dependencies.push(e),this}},{key:"postProcess",value:function(e){return this.postProcessors.push(e),this}},{key:"performPreProcess",value:function(){var e=this;return this.dependencies.forEach(function(t){t.process(t.processor._results,e)}),this}},{key:"performPostProcess",value:function(e){this._results=e;var t=e;return this.postProcessors.forEach(function(e){t=e(t)}),t}}])&&r(t.prototype,n),i&&r(t,i),e}();t.Processor=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fn=void 0;var r,o=n(6),i=n(33),u=n(34),s=n(35),a=(r=n(4))&&r.__esModule?r:{default:r},c=n(3),f=n(12),l=n(37);var p={Promise:a.default,Analytics:o.Analytics,EventAnalytics:i.EventAnalytics,AnalyticsObject:o.AnalyticsObject,AnalyticsHeaders:o.AnalyticsHeaders,OrganisationUnit:s.OrganisationUnit,SQLViewData:u.SQLViewData,Runner:c.Runner,Dependency:f.Dependency,MultiFetcher:l.MultiFetcher,all:function(e){return new l.MultiFetcher(e)},init:function(e){c.Runner.initiateRunner(e)}};t.Fn=p,"undefined"!=typeof window&&(window.Fn=p)},function(e,t,n){e.exports=n(15)},function(e,t,n){"use strict";var r=n(0),o=n(8),i=n(17),u=n(5);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var a=s(u);a.Axios=i,a.create=function(e){return s(r.merge(u,e))},a.Cancel=n(11),a.CancelToken=n(31),a.isCancel=n(10),a.all=function(e){return Promise.all(e)},a.spread=n(32),e.exports=a,e.exports.default=a},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(5),o=n(0),i=n(26),u=n(27);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[u,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var u=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),u.push(o(t)+"="+o(e))}))}),i=u.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,u={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(u[t]&&o.indexOf(t)>=0)return;u[t]="set-cookie"===t?(u[t]?u[t]:[]).concat([n]):u[t]?u[t]+", "+n:n}}),u):u}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),u="",s=0,a=r;i.charAt(0|s)||(a="=",s%1);u+=a.charAt(63&t>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return u}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,u){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===u&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(28),i=n(10),u=n(5),s=n(29),a=n(30);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=a(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||u.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(11);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventAnalytics=void 0;var r=n(6);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Analytics),n=t,(o=[{key:"setProgram",value:function(e){return this.program=e,this}},{key:"url",get:function(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}}])&&i(n.prototype,o),a&&i(n,a),t}();t.EventAnalytics=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SQLViewData=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._id=e,n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Fetcher),n=t,(o=[{key:"url",get:function(){return"sqlViews/"+this._id+"/data.json"}}])&&i(n.prototype,o),a&&i(n,a),t}();t.SQLViewData=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OrganisationUnit=void 0;var r=n(36);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.IdentifiableObject),n=t,(o=[{key:"name",get:function(){return"organisationUnits"}}])&&i(n.prototype,o),a&&i(n,a),t}();t.OrganisationUnit=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IdentifiableObject=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._filters=[],e}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Fetcher),n=t,(o=[{key:"where",value:function(e,t,n){return this._filters.push({right:e,operator:t,left:n}),this}},{key:"name",get:function(){throw Error("Object name not implemented")}},{key:"url",get:function(){var e=this._urlParameters;return this._filters.forEach(function(t){e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),this.name+".json?"+e}}])&&i(n.prototype,o),a&&i(n,a),t}();t.IdentifiableObject=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MultiFetcher=void 0;var r=n(3),o=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._fetchers=e,n}var n,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,o.Fetcher),n=t,(i=[{key:"get",value:function(){return(new r.Runner).getAllResults(this)}},{key:"fetchers",get:function(){return this._fetchers}}])&&u(n.prototype,i),c&&u(n,c),t}();t.MultiFetcher=c}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3Mvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy9jb3JlL2ZldGNoZXIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2NvcmUvcnVubmVyLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzcy1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2ltcGwvYW5hbHl0aWNzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvY29yZS9wcm9jZXNzb3IuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvaW1wbC9ldmVudC1hbmFseXRpY3MuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2ltcGwvc3FsLXZpZXcuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2ltcGwvb3JnYW5pc2F0aW9uLXVuaXQuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2NvcmUvaWRlbnRpZmlhYmxlLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvY29yZS9tdWx0aS1mZXRjaGVyLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwidmFsIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwibGVuZ3RoIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImFyZ3VtZW50cyIsImV4dGVuZCIsImEiLCJiIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwiX3J1bm5lciIsIl9wcm9jZXNzb3IiLCJfcHJvZ3Jlc3NQcm9taXNlIiwiRmV0Y2hlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsInBhcmFtZXRlcnMiLCJSdW5uZXIiLCJnZXRSZXN1bHRzIiwiX3RoaXMyIiwia2V5cyIsInByb21pc2VzIiwiZGVwZW5kZW5jaWVzIiwibWFwIiwiZGVwZW5kZW5jeSIsInByb2Nlc3NvciIsImRlZmF1bHQiLCJhbGwiLCJfdGhpczMiLCJ1cmwiLCJrZXkyIiwiRXJyb3IiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwib3BlbiIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VVUkwiLCJpbmRleE9mIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImUiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJfaW5zdGFuY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2F4aW9zIiwiX2h0dHAiLCJfeGhyIiwiY29uZmlndXJhdGlvbnMiLCJpbnN0YW5jZSIsImZldGNoZXIiLCJiYXNlVXJsIiwiYWRhcHRlciIsInByb2Nlc3MiLCJyZXN1bHRzIiwicGVyZm9ybVBvc3RQcm9jZXNzIiwiZXJyIiwiX2ZldGNoZXJzIiwiZ2V0QWxsUmVzdWx0cyIsInByb2dyZXNzIiwiaGFzRGVwZW5kZW5jaWVzIiwiZ2V0RGVwZW5kZWN5RmV0Y2hSZXN1bHRzIiwicGVyZm9ybVByZVByb2Nlc3MiLCJfZmV0Y2giLCJjYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJtdWx0aWZldGNoZXIiLCJmZXRjaGVycyIsIkxJU1RFTkVSUyIsIlByb2dyZXNzUHJvbWlzZSIsIltvYmplY3QgT2JqZWN0XSIsImV4ZWN1dG9yIiwic3VwZXIiLCJsaXN0ZW5lciIsImVycm9yIiwiaGFuZGxlciIsInB1c2giLCJBcnJheSIsInJlc29sdmVDb3VudCIsImluZGV4IiwicHJvcG9ydGlvbiIsImlucHV0cyIsImludm9rZU5leHQiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJKU09OIiwic3RyaW5naWZ5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsIl9mZXRjaGVyIiwiQW5hbHl0aWNzSGVhZGVycyIsIl9yZWYiLCJhcHBseSIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsInNldFByb3RvdHlwZU9mIiwiaWQiLCJyZXR1cm5IZWFkZXIiLCJoZWFkZXIiLCJnZXRIZWFkZXIiLCJBbmFseXRpY3NPYmplY3QiLCJhbmFseXRpY3NPYmplY3QiLCJfZGF0YSIsIm1ldGFEYXRhIiwicm93cyIsImhlaWdodCIsIndpZHRoIiwiQW5hbHl0aWNzIiwib2xkQW5hbHl0aWNzIiwicG9zdFByb2Nlc3MiLCJzdGFuZGFyZGl6ZUFuYWx5dGljcyIsImR4IiwicGUiLCJvdSIsInByZWZlck5vcm1hbFN0cnVjdHVyZSIsImNvdW50Iiwic2FuaXRpemVkQW5hbHl0aWNzT2JqZWN0IiwiZGltZW5zaW9ucyIsIm5hbWVzIiwiY28iLCJuZXdIZWFkZXIiLCJ3YXJuIiwic2FuaXRpemVkTWV0YWRhdGEiLCJnZXRTYW5pdGl6ZWRBbmFseXRpY3NNZXRhZGF0YSIsImFuYWx5dGljTWV0YWRhdGEiLCJvdUhpZXJhcmNoeSIsIml0ZW1zIiwibWV0YWRhdGFOYW1lcyIsIm1ldGFkYXRhSXRlbUtleSIsIm1ldGFkYXRhRGltZW5zaW9ucyIsIm1ldGFkYXRhS2V5IiwiX3VybFBhcmFtZXRlcnMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsIl9fQ0FOQ0VMX18iLCJDYW5jZWwiLCJEZXBlbmRlbmN5IiwiUHJvY2Vzc29yIiwicG9zdFByb2Nlc3NvcnMiLCJjYWxsYmFjayIsIl9yZXN1bHRzIiwiZGF0YVRvUHJvY2VzcyIsIl9hbmFseXRpY3MiLCJfZXZlbnRBbmFseXRpY3MiLCJfc3FsVmlldyIsIl9vcmdhbmlzYXRpb25Vbml0IiwiX211bHRpRmV0Y2hlciIsIkZuIiwiRXZlbnRBbmFseXRpY3MiLCJPcmdhbmlzYXRpb25Vbml0IiwiU1FMVmlld0RhdGEiLCJNdWx0aUZldGNoZXIiLCJpbml0IiwiaW5pdGlhdGVSdW5uZXIiLCJBeGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInNwcmVhZCIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsInRvSVNPU3RyaW5nIiwiam9pbiIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwib3JpZ2luVVJMIiwibXNpZSIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImNoYXJzIiwiRSIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsIlN0cmluZyIsIm91dHB1dCIsImlkeCIsImNoYXJDb2RlQXQiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWFzb24iLCJmbnMiLCJyZWxhdGl2ZVVSTCIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJzb3VyY2UiLCJhcnIiLCJwcm9ncmFtIiwiX2lkIiwiX2lkZW50aWZpYWJsZU9iamVjdCIsIklkZW50aWZpYWJsZU9iamVjdCIsIl9maWx0ZXJzIiwicmlnaHQiLCJvcGVyYXRvciIsImxlZnQiLCJmaWx0ZXIiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsd0JBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsc0JBQUFELElBRUFELEVBQUEsc0JBQUFDLElB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S0FDTSxPQUFwQkMsRUFBT0YsU0FDaEI1VSxHQUFPLE9BQVM4VSxFQUFPRCxLQUNNLE1BQXBCQyxFQUFPRixTQUNoQjVVLEdBQU8sT0FBUzhVLEVBQU9ELEtBQ00sT0FBcEJDLEVBQU9GLFNBQ2hCNVUsR0FBTyxPQUFTOFUsRUFBT0QsS0FDTSxPQUFwQkMsRUFBT0YsU0FDaEI1VSxHQUFPLFFBQVU4VSxFQUFPRCxLQUNLLE9BQXBCQyxFQUFPRixVQUF5QyxRQUFwQkUsRUFBT0YsU0FDNUM1VSxHQUFPLElBQU04VSxFQUFPRixTQUFXLEtBQU9FLEVBQU9ELEtBQU8sSUFDMUNDLEVBQU9ELEtBR2pCN1UsR0FBTyxJQUFNOFUsRUFBT0YsU0FBVyxJQUFNRSxFQUFPRCxLQUY1QzdVLEdBQU8sSUFBTThVLEVBQU9GLFdBS2pCamIsS0FBS1csS0FBTyxTQUFXMEYsbUtDNUNsQyxJQUFBdEIsRUFBQTdFLEVBQUEsR0FDQTROLEVBQUE1TixFQUFBLDZxQkFFYXVVLGNBQ1gsU0FBQUEsRUFBWXpJLEdBQVUsSUFBQTdHLEVBQUEsbUdBQUFDLENBQUFwRixLQUFBeVUsSUFDcEJ0UCxFQUFBRSxFQUFBckYsTUFBQXlVLEVBQUFuUCxXQUFBeEUsT0FBQXlFLGVBQUFrUCxJQUFBbFUsS0FBQVAsUUFDS3FMLFVBQVlXLEVBRkc3Ryx1U0FTcEIsT0FBUSxJQUFBSixFQUFBVSxRQUFjNkYsY0FBY3RMLHVDQUpwQyxPQUFPQSxLQUFLcUwiLCJmaWxlIjoiZnVuY3Rpb24tYW5hbHl0aWNzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiZnVuY3Rpb24tYW5hbHl0aWNzXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImZ1bmN0aW9uLWFuYWx5dGljc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJmdW5jdGlvbi1hbmFseXRpY3NcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJpbXBvcnQgeyBSdW5uZXIgfSBmcm9tICcuL3J1bm5lcic7XG5pbXBvcnQgeyBQcm9jZXNzb3IgfSBmcm9tICcuL3Byb2Nlc3Nvcic7XG5pbXBvcnQgUHJvZ3Jlc3NQcm9taXNlIGZyb20gJ3Byb2dyZXNzLXByb21pc2UnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGZldGNoZXIgcHJvY2Vzc1xuICpAZXh0ZW5kcyBQcm9jZXNzb3JcbiAqL1xuZXhwb3J0IGNsYXNzIEZldGNoZXIgZXh0ZW5kcyBQcm9jZXNzb3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGZldGhjZXJcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIFVSTCBQYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXQgX3VybFBhcmFtZXRlcnMoKSB7XG4gICAgbGV0IHVybCA9ICcnO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5wYXJhbWV0ZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh1cmwgIT09ICcnKSB7XG4gICAgICAgIHVybCArPSAnJic7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMucGFyYW1ldGVyc1trZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cmwgKz0ga2V5ICsgJz0nICsgdGhpcy5wYXJhbWV0ZXJzW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnBhcmFtZXRlcnNba2V5XSkuZm9yRWFjaCgoa2V5MikgPT4ge1xuICAgICAgICAgIGlmICh1cmwgIT09ICcnKSB7XG4gICAgICAgICAgICB1cmwgKz0gJyYnO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cmwgKz0ga2V5ICsgJz0nICsga2V5MiArICc6JyArIHRoaXMucGFyYW1ldGVyc1trZXldW2tleTJdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVybFxuICAgKiBAdGhyb3dzIEltcGxlbWVudGF0aW9uIEVycm9yXG4gICAqL1xuICBnZXQgdXJsKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIGltcGxlbWVudCB1cmwgZ2VuZXJhdGlvbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJ1bm5pbmcgcHJvY2VzcyBzdGFydGVkXG4gICAqIEByZXR1cm5zIHtQcm9ncmVzc1Byb21pc2V9XG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIChuZXcgUnVubmVyKCkpLmdldFJlc3VsdHModGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHBhcmVtZXRlcnNcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge0ZldGNoZXJ9XG4gICAqL1xuICBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHRoaXMucGFyYW1ldGVyc1trZXldID0gcGFyYW1ldGVyc1trZXldO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBEZXBlbmRlbmN5IHJlc3VsdHNcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX1cbiAgICovXG4gIGdldERlcGVuZGVjeUZldGNoUmVzdWx0cygpIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuZGVwZW5kZW5jaWVzLm1hcCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgICAgcmV0dXJuIChuZXcgUnVubmVyKCkpLmdldFJlc3VsdHMoZGVwZW5kZW5jeS5wcm9jZXNzb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFByb2dyZXNzUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsImltcG9ydCBQcm9ncmVzc1Byb21pc2UgZnJvbSAncHJvZ3Jlc3MtcHJvbWlzZSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGh0dHBhZGFwdGVyIGZyb20gJ2F4aW9zL2xpYi9hZGFwdGVycy9odHRwJztcbmltcG9ydCB4aHJhZGFwdGVyIGZyb20gJ2F4aW9zL2xpYi9hZGFwdGVycy94aHInO1xubGV0IF9pbnN0YW5jZTtcblxuLyoqXG4gKiBSdW5uZXIgcmVwcmVzZW50cyB0aGUgcHJvY2VzcyB3aGljaCB3aWxsIHNjaGVkdWxlIGFuZCBydW4gb3BlcmF0aW9ucyBvZiB0aGUgcHJvY2Vzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5uZXIge1xuICAvKipcbiAgICogSW5pdGlhdGVzIHRoZSBydW5uZXIgc2luZ2xldG9uIGluc3RhbmNlXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uc1xuICAgKi9cbiAgc3RhdGljIGluaXRpYXRlUnVubmVyKGNvbmZpZ3VyYXRpb25zKSB7XG4gICAgaWYgKCFSdW5uZXIuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlndXJhdGlvbnM7XG4gICAgICBfaW5zdGFuY2UgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFJ1bm5lciBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7UnVubmVyfVxuICAgKi9cbiAgZ2V0IGluc3RhbmNlKCkge1xuICAgIHJldHVybiBfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uc1xuICAgKi9cbiAgc2V0IGNvbmZpZyhjb25maWd1cmF0aW9ucykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlndXJhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb25maWd1cmF0aW9uc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FsbGJhY2sgdHlwZSBpcyBjYWxsZWQgYHJlc29sdmVDYWxsYmFja2AuXG4gICAqXG4gICAqIEBjYWxsYmFjayByZXNvbHZlQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlUmVzdWx0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGlzIGNhbGxiYWNrIHR5cGUgaXMgY2FsbGVkIGByZWplY3RDYWxsYmFja2AuXG4gICAqXG4gICAqIEBjYWxsYmFjayByZWplY3RDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgZGF0YSBmcm9tIHRoZSBmZXRjaGVyXG4gICAqIEBwYXJhbSB7RmV0Y2hlcn0gZmV0Y2hlclxuICAgKiBAcGFyYW0ge3Jlc29sdmVDYWxsYmFja30gcmVzb2x2ZVxuICAgKiBAcGFyYW0ge3JlamVjdENhbGxiYWNrfSByZWplY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9mZXRjaChmZXRjaGVyLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIV9pbnN0YW5jZSkge1xuICAgICAgbGV0IGVycm9yID0gJ0NvbmZpZ3JhdGlvbiBub3Qgc2V0IHBsZWFzZSBjb25maWdyZSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ2FuYWx5dGljcyBlZyB7YmFzZVVybDpcImRoaXNfYmFzZV91cmxcIiwgdXNlcm5hbWU6XCJ1c2VybmFtZVwiLCAnICtcbiAgICAgICAgJ3Bhc3N3b3JkOlwicGFzc3dvcmRcIn0nO1xuXG4gICAgICB0aHJvdyBFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIHVybDogX2luc3RhbmNlLmNvbmZpZy5iYXNlVXJsICsgZmV0Y2hlci51cmwsXG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgYWRhcHRlcjogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gaHR0cGFkYXB0ZXIgOiB4aHJhZGFwdGVyXG4gICAgfTtcblxuICAgIGlmIChfaW5zdGFuY2UuY29uZmlnLnVzZXJuYW1lICYmIF9pbnN0YW5jZS5jb25maWcucGFzc3dvcmQpIHtcbiAgICAgIGNvbmZpZy5hdXRoID0ge1xuICAgICAgICB1c2VybmFtZTogX2luc3RhbmNlLmNvbmZpZy51c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IF9pbnN0YW5jZS5jb25maWcucGFzc3dvcmRcbiAgICAgIH07XG4gICAgfVxuICAgIGF4aW9zLnJlcXVlc3QoY29uZmlnKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICByZXNvbHZlKGZldGNoZXIucGVyZm9ybVBvc3RQcm9jZXNzKHJlc3VsdHMuZGF0YSkpO1xuICAgIH0sIChlcnIpID0+IHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgZGF0YSByZWxhdGVkIHRvIGEgZmV0Y2hlclxuICAgKiBAcGFyYW0ge0ZldGNoZXJ9IGZldGNoZXJcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX1cbiAgICovXG4gIGdldFJlc3VsdHMoZmV0Y2hlcikge1xuICAgIGlmIChmZXRjaGVyLl9mZXRjaGVycykgeyAvLyBJZiBpcyBhIG11bHRpZmV0Y2hlclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsUmVzdWx0cyhmZXRjaGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9ncmVzc1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIGlmIChmZXRjaGVyLmhhc0RlcGVuZGVuY2llcygpKSB7XG4gICAgICAgIGZldGNoZXIuZ2V0RGVwZW5kZWN5RmV0Y2hSZXN1bHRzKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgZmV0Y2hlci5wZXJmb3JtUHJlUHJvY2VzcygpO1xuICAgICAgICAgIHRoaXMuX2ZldGNoKGZldGNoZXIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXJycnJycnJycnJyOicsIGVycik7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZmV0Y2goZmV0Y2hlciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGRhdGEgZm9yIG11bHRpcGxlIGZldGNoZXJzXG4gICAqIEBwYXJhbSB7TXVsdGlGZXRjaGVyfSBtdWx0aWZldGNoZXJcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX1cbiAgICovXG4gIGdldEFsbFJlc3VsdHMobXVsdGlmZXRjaGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9ncmVzc1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIGNvbnN0IHByb21pc2VzID0gbXVsdGlmZXRjaGVyLmZldGNoZXJzLm1hcCgoZmV0Y2hlcikgPT4gKG5ldyBSdW5uZXIoKSkuZ2V0UmVzdWx0cyhmZXRjaGVyKSk7XG5cbiAgICAgIHJldHVybiBQcm9ncmVzc1Byb21pc2UuYWxsKHByb21pc2VzKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIHJlc29sdmUobXVsdGlmZXRjaGVyLnBlcmZvcm1Qb3N0UHJvY2VzcyhyZXN1bHRzKSk7XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZhbGxiYWNrIGZvciBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBTeW1ib2xcbmNvbnN0IExJU1RFTkVSUyA9IFN5bWJvbCA/IFN5bWJvbCgpIDogJ19fbGlzdGVuZXJzJztcblxuY2xhc3MgUHJvZ3Jlc3NQcm9taXNlIGV4dGVuZHMgUHJvbWlzZSB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgc3VwZXIoKHJlc29sdmUsIHJlamVjdCkgPT4gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0LFxuICAgICAgLy8gUGFzcyBtZXRob2QgZm9yIHBhc3NpbmcgcHJvZ3Jlc3MgdG8gbGlzdGVuZXJcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tMSVNURU5FUlNdLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIodmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB0aGlzW0xJU1RFTkVSU10gPSBbXTtcbiAgfVxuICBwcm9ncmVzcyhoYW5kbGVyKSB7XG4gICAgaWYodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BST0dSRVNTX1JFUVVJUkVTX0ZVTkNUSU9OJyk7XG4gICAgdGhpc1tMSVNURU5FUlNdLnB1c2goaGFuZGxlcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc3RhdGljIGFsbChwcm9taXNlcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkocHJvbWlzZXMubGVuZ3RoKTtcbiAgICBjb25zdCBsZW5ndGggPSBwcm9taXNlcy5sZW5ndGg7XG4gICAgbGV0IHJlc29sdmVDb3VudCA9IDA7XG4gICAgcmV0dXJuIG5ldyBQcm9ncmVzc1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIHByb21pc2VzLmZvckVhY2goKHByb21pc2UsIGluZGV4KSA9PiB7XG4gICAgICAgIHByb21pc2UudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0O1xuICAgICAgICAgIHJlc3VsdHMucHJvcG9ydGlvbiA9ICsrcmVzb2x2ZUNvdW50IC8gbGVuZ3RoO1xuICAgICAgICAgIHByb2dyZXNzKHJlc3VsdHMpO1xuICAgICAgICAgIGlmKHJlc29sdmVDb3VudCA9PT0gbGVuZ3RoKSByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHNlcXVlbmNlKGlucHV0cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBjb25zdCBsZW5ndGggPSBpbnB1dHMubGVuZ3RoO1xuICAgIGxldCByZXNvbHZlQ291bnQgPSAwO1xuICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NQcm9taXNlKChyZXNvbHZlLCByZWplY3QsIHByb2dyZXNzKSA9PiB7XG4gICAgICBmdW5jdGlvbiBpbnZva2VOZXh0KCkge1xuICAgICAgICBoYW5kbGVyLmNhbGwobnVsbCwgaW5wdXRzW3Jlc3VsdHMubGVuZ3RoXSlcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICByZXN1bHRzLnByb3BvcnRpb24gPSArK3Jlc29sdmVDb3VudCAvIGxlbmd0aDtcbiAgICAgICAgICAgIHByb2dyZXNzKHJlc3VsdHMpO1xuICAgICAgICAgICAgaWYocmVzdWx0cy5sZW5ndGggPT09IGxlbmd0aCkgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgIGVsc2UgaW52b2tlTmV4dCgpO1xuICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7O1xuICAgICAgfVxuICAgICAgaW52b2tlTmV4dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvZ3Jlc3NQcm9taXNlO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsImltcG9ydCB7IEZldGNoZXIgfSBmcm9tICcuLi9jb3JlL2ZldGNoZXInO1xuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyB0aGUgQW5hbHl0aWNzIGhlYWRlclxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0hlYWRlciB7fVxuLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgdGhlIEFuYWx5dGljcyBIZWFkZXJzXG4gKlxuICogQGV4dGVuZHMgQXJyYXlcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0hlYWRlcnMgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBzdXBlciguLi5kYXRhKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgT2JqZWN0LmNyZWF0ZShBbmFseXRpY3NIZWFkZXJzLnByb3RvdHlwZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGRhdGEgYW5hbHl0aWNzIGhlYWRlclxuICAgKlxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzSGVhZGVyfVxuICAgKi9cbiAgZ2V0IGR4KCkge1xuICAgIHJldHVybiB0aGlzLmdldEhlYWRlcignZHgnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwZXJpb2QgYW5hbHl0aWNzIGhlYWRlclxuICAgKlxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzSGVhZGVyfVxuICAgKi9cbiAgZ2V0IHBlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEhlYWRlcigncGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBvcmdhbmlzYXRpb24gdW5pdCBhbmFseXRpY3MgaGVhZGVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3NIZWFkZXJ9XG4gICAqL1xuICBnZXQgb3UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SGVhZGVyKCdvdScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGFuYWx5dGljcyBoZWFkZXJcbiAgICpcbiAgICogQHJldHVybnMge0FuYWx5dGljc0hlYWRlcn1cbiAgICovXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRIZWFkZXIoJ3ZhbHVlJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgaGVhZGVyIG9mIGEgcGFyYW1ldGVyXG4gICAqIEBwYXJhbSBpZFxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzSGVhZGVyfVxuICAgKi9cbiAgZ2V0SGVhZGVyKGlkKSB7XG4gICAgbGV0IHJldHVybkhlYWRlcjtcblxuICAgIHRoaXMuZm9yRWFjaCgoaGVhZGVyLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGhlYWRlci5uYW1lID09PSBpZCkge1xuICAgICAgICByZXR1cm5IZWFkZXIgPSBoZWFkZXI7XG4gICAgICAgIHJldHVybkhlYWRlci5pbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXR1cm5IZWFkZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgdGhlIEFuYWx5dGljcyBSZXN1bHRzXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQW5hbHl0aWNzT2JqZWN0IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmEgQW5hbHl0aWNzIE9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gLSBESElTIEFuYWx5dGljcyBvYmplY3RcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFuYWx5dGljc09iamVjdCkge1xuICAgIHRoaXMuX2RhdGEgPSBhbmFseXRpY3NPYmplY3Q7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgQW5hbHl0aWNzIEhlYWRlcnMgQXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0FuYWx5dGljc0hlYWRlcnN9XG4gICAqL1xuICBnZXQgaGVhZGVycygpIHtcbiAgICByZXR1cm4gbmV3IEFuYWx5dGljc0hlYWRlcnModGhpcy5fZGF0YS5oZWFkZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBBbmFseXRpY3MgTWV0YWRhdGEgT2JqZWN0XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfG1ldGFEYXRhfHtkaW1lbnNpb25zLCBuYW1lcywgZHgsIHBlLCBvdSwgY299fHtvdUhpZXJhcmNoeSwgaXRlbXMsIGRpbWVuc2lvbnN9fVxuICAgKi9cbiAgZ2V0IG1ldGFEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLm1ldGFEYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJvd3Mgb2YgdGhlIGFuYWx5dGljcyBvYmplY3RcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgZ2V0IHJvd3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEucm93cztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBBbmFseXRpY3MgaGVpZ2h0XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBBbmFseXRpY3Mgd2lkdGhcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS53aWR0aDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyB0aGUgQW5hbHl0aWNzIEZldGNoZXIgZm9yIHByb2Nlc3NpbmcgYW5hbHl0aWNzIGNhbGxzXG4gKlxuICogQGV4dGVuZHMgRmV0Y2hlclxuICovXG5leHBvcnQgY2xhc3MgQW5hbHl0aWNzIGV4dGVuZHMgRmV0Y2hlciB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYW5hbHl0aWNzIGZldGhjZXJcbiAgICpcbiAgICogQHBhcmFtIG9sZEFuYWx5dGljcyAtIFdoZXRoZXIgdGhlIHN0cnVjdHVyZSB0byBiZSByZXR1cm5lZCBzaG91bGQgYmUgb2xkIG9yIG5ldy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9sZEFuYWx5dGljcyA9IHRydWUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGFyYW1ldGVyc1snZGltZW5zaW9uJ10gPSB7fTtcbiAgICB0aGlzLnBvc3RQcm9jZXNzKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFuZGFyZGl6ZUFuYWx5dGljcyhkYXRhLCBvbGRBbmFseXRpY3MpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRhdGEgZm9yIHRoZSBmZXRjaFxuICAgKiBAcGFyYW0gZHhcbiAgICogQHJldHVybnMge0FuYWx5dGljc31cbiAgICovXG4gIHNldERhdGEoZHgpIHtcbiAgICB0aGlzLnBhcmFtZXRlcnNbJ2RpbWVuc2lvbiddWydkeCddID0gZHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcGVyaW9kIGZvciB0aGUgZmV0Y2hcbiAgICogQHBhcmFtIHBlXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3N9XG4gICAqL1xuICBzZXRQZXJpb2QocGUpIHtcbiAgICB0aGlzLnBhcmFtZXRlcnNbJ2RpbWVuc2lvbiddWydwZSddID0gcGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgb3JnYW5pc2F0aW9uIHVuaXQgZm9yIHRoZSBmZXRjaGluZyBvZiB0aGUgYW5hbHl0aWNzXG4gICAqIEBwYXJhbSBvdVxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzfVxuICAgKi9cbiAgc2V0T3JnVW5pdChvdSkge1xuICAgIHRoaXMucGFyYW1ldGVyc1snZGltZW5zaW9uJ11bJ291J10gPSBvdTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFuZGFyZGl6ZXMgdGhlIGFuYWx5dGljcyBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIGFuYWx5dGljc09iamVjdCAtIFRoZSBhbmFseXRpY3Mgb2JqZWN0XG4gICAqIEBwYXJhbSBwcmVmZXJOb3JtYWxTdHJ1Y3R1cmUgLSBXaGV0aGVyIHRvIHByZWZlciB0aGUgb2xkIG9yIG5ldyBhbmFseXRpY3Mgc3RydWN0dXJlXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3NPYmplY3R9XG4gICAqL1xuICBzdGFuZGFyZGl6ZUFuYWx5dGljcyhhbmFseXRpY3NPYmplY3QsIHByZWZlck5vcm1hbFN0cnVjdHVyZSA9IHRydWUpIHtcbiAgICAvLyBpZiBTZXJ2ZXJzaWRlIEV2ZW50IGNsdXN0ZXJpbmcgZG8gbm90aGluZ1xuICAgIGlmIChhbmFseXRpY3NPYmplY3QuY291bnQpIHtcbiAgICAgIHJldHVybiBhbmFseXRpY3NPYmplY3Q7XG4gICAgfVxuICAgIGxldCBzYW5pdGl6ZWRBbmFseXRpY3NPYmplY3QgPSB7XG4gICAgICBoZWFkZXJzOiBbXSxcbiAgICAgIG1ldGFEYXRhOiB7XG4gICAgICAgIGRpbWVuc2lvbnM6IHt9LFxuICAgICAgICBuYW1lczoge30sXG4gICAgICAgIGR4OiBbXSxcbiAgICAgICAgcGU6IFtdLFxuICAgICAgICBvdTogW10sXG4gICAgICAgIGNvOiBbXVxuICAgICAgfSxcbiAgICAgIHJvd3M6IFtdXG4gICAgfTtcblxuICAgIGlmIChhbmFseXRpY3NPYmplY3QpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBoZWFkZXJzXG4gICAgICAgKi9cbiAgICAgIGlmIChhbmFseXRpY3NPYmplY3QuaGVhZGVycykge1xuICAgICAgICBhbmFseXRpY3NPYmplY3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IG5ld0hlYWRlciA9IGhlYWRlcjtcblxuICAgICAgICAgICAgc2FuaXRpemVkQW5hbHl0aWNzT2JqZWN0LmhlYWRlcnMucHVzaChuZXdIZWFkZXIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBoZWFkZXIgb2JqZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBtZXRhRGF0YVxuICAgICAgICovXG4gICAgICBpZiAoYW5hbHl0aWNzT2JqZWN0Lm1ldGFEYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHNhbml0aXplZE1ldGFkYXRhID0gdGhpcy5nZXRTYW5pdGl6ZWRBbmFseXRpY3NNZXRhZGF0YShhbmFseXRpY3NPYmplY3QubWV0YURhdGEsIHByZWZlck5vcm1hbFN0cnVjdHVyZSk7XG5cbiAgICAgICAgICBzYW5pdGl6ZWRBbmFseXRpY3NPYmplY3QubWV0YURhdGEgPSBzYW5pdGl6ZWRNZXRhZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBtZXRhZGF0YSBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrIHJvd3NcbiAgICAgICAqL1xuICAgICAgaWYgKGFuYWx5dGljc09iamVjdC5yb3dzKSB7XG4gICAgICAgIHNhbml0aXplZEFuYWx5dGljc09iamVjdC5yb3dzID0gYW5hbHl0aWNzT2JqZWN0LnJvd3M7XG4gICAgICB9XG4gICAgfVxuICAgIHNhbml0aXplZEFuYWx5dGljc09iamVjdC5oZWlnaHQgPSBhbmFseXRpY3NPYmplY3QuaGVpZ2h0O1xuICAgIHNhbml0aXplZEFuYWx5dGljc09iamVjdC53aWR0aCA9IGFuYWx5dGljc09iamVjdC53aWR0aDtcbiAgICByZXR1cm4gbmV3IEFuYWx5dGljc09iamVjdChzYW5pdGl6ZWRBbmFseXRpY3NPYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YW5kYXJkaXplcyB0aGUgYW5hbHl0aWNzIG1ldGFkYXRhIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0gYW5hbHl0aWNNZXRhZGF0YSAtIFRoZSBhbmFseXRpY3MgbWV0YWRhdGEgb2JqZWN0XG4gICAqIEBwYXJhbSBwcmVmZXJOb3JtYWxTdHJ1Y3R1cmUgLSBXaGV0aGVyIHRvIHByZWZlciB0aGUgb2xkIG9yIG5ldyBhbmFseXRpY3Mgc3RydWN0dXJlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRTYW5pdGl6ZWRBbmFseXRpY3NNZXRhZGF0YShhbmFseXRpY01ldGFkYXRhLCBwcmVmZXJOb3JtYWxTdHJ1Y3R1cmUpIHtcbiAgICBsZXQgc2FuaXRpemVkTWV0YWRhdGEgPSB7XG4gICAgICBkaW1lbnNpb25zOiB7fSxcbiAgICAgIG5hbWVzOiB7fSxcbiAgICAgIGR4OiBbXSxcbiAgICAgIHBlOiBbXSxcbiAgICAgIG91OiBbXSxcbiAgICAgIGNvOiBbXVxuICAgIH07XG5cbiAgICBpZiAoYW5hbHl0aWNNZXRhZGF0YSkge1xuICAgICAgaWYgKGFuYWx5dGljTWV0YWRhdGEub3VIaWVyYXJjaHkpIHtcbiAgICAgICAgc2FuaXRpemVkTWV0YWRhdGEub3VIaWVyYXJjaHkgPSBhbmFseXRpY01ldGFkYXRhLm91SGllcmFyY2h5O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgbWV0YWRhdGEgbmFtZXNcbiAgICAgICAqL1xuICAgICAgaWYgKGFuYWx5dGljTWV0YWRhdGEubmFtZXMpIHtcbiAgICAgICAgc2FuaXRpemVkTWV0YWRhdGEubmFtZXMgPSBhbmFseXRpY01ldGFkYXRhLm5hbWVzO1xuICAgICAgfSBlbHNlIGlmIChhbmFseXRpY01ldGFkYXRhLml0ZW1zKSB7XG5cbiAgICAgICAgbGV0IG1ldGFkYXRhTmFtZXMgPSB7fTtcblxuICAgICAgICBmb3IgKGxldCBtZXRhZGF0YUl0ZW1LZXkgaW4gYW5hbHl0aWNNZXRhZGF0YS5pdGVtcykge1xuICAgICAgICAgIG1ldGFkYXRhTmFtZXNbbWV0YWRhdGFJdGVtS2V5XSA9IGFuYWx5dGljTWV0YWRhdGEuaXRlbXNbbWV0YWRhdGFJdGVtS2V5XS5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgc2FuaXRpemVkTWV0YWRhdGFbJ25hbWVzJ10gPSBtZXRhZGF0YU5hbWVzO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBtZXRhZGF0YSBkaW1lbnNpb25zXG4gICAgICAgKi9cbiAgICAgIGlmIChhbmFseXRpY01ldGFkYXRhLmRpbWVuc2lvbnMpIHtcbiAgICAgICAgaWYgKCFwcmVmZXJOb3JtYWxTdHJ1Y3R1cmUpIHtcbiAgICAgICAgICBzYW5pdGl6ZWRNZXRhZGF0YVsnZGltZW5zaW9ucyddID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBzYW5pdGl6ZWRNZXRhZGF0YS5kaW1lbnNpb25zO1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmR4ID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zLmR4O1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLm91ID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zLm91O1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLnBlID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zLnBlO1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmNvID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zLmNvO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbWV0YWRhdGFEaW1lbnNpb25zID0ge307XG5cbiAgICAgICAgZm9yIChsZXQgbWV0YWRhdGFLZXkgaW4gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zKSB7XG4gICAgICAgICAgaWYgKGFuYWx5dGljTWV0YWRhdGEuaGFzT3duUHJvcGVydHkobWV0YWRhdGFLZXkpKSB7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGFLZXkgIT09ICduYW1lcycpIHtcbiAgICAgICAgICAgICAgbWV0YWRhdGFEaW1lbnNpb25zW21ldGFkYXRhS2V5XSA9IGFuYWx5dGljTWV0YWRhdGEuZGltZW5zaW9uc1ttZXRhZGF0YUtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcmVmZXJOb3JtYWxTdHJ1Y3R1cmUpIHtcbiAgICAgICAgICBzYW5pdGl6ZWRNZXRhZGF0YVsnZGltZW5zaW9ucyddID0gbWV0YWRhdGFEaW1lbnNpb25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmR4ID0gbWV0YWRhdGFEaW1lbnNpb25zLmR4O1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLm91ID0gbWV0YWRhdGFEaW1lbnNpb25zLm91O1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLnBlID0gbWV0YWRhdGFEaW1lbnNpb25zLnBlO1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmNvID0gbWV0YWRhdGFEaW1lbnNpb25zLmNvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNhbml0aXplZE1ldGFkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVybCBmb3IgZmV0Y2hpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCB1cmwoKSB7XG4gICAgcmV0dXJuICdhbmFseXRpY3M/JyArIHRoaXMuX3VybFBhcmFtZXRlcnM7XG4gIH1cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIi8qKlxuICogVGhpcyBjYWxsYmFjayB0eXBlIGlzIGNhbGxlZCBgcHJvY2Vzc0NhbGxiYWNrYC5cbiAqXG4gKiBAY2FsbGJhY2sgcHJvY2Vzc0NhbGxiYWNrXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzdWx0XG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcHJvY2VzcyBkZXBlbmRlbmN5XG4gKi9cbmV4cG9ydCBjbGFzcyBEZXBlbmRlbmN5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBkZXBlbmRlbmN5IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7UHJvY2Vzc29yfSBwcm9jZXNzb3JcbiAgICogQHBhcmFtIHtwcm9jZXNzQ2FsbGJhY2t9IHByb2Nlc3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2Nlc3NvciwgcHJvY2Vzcykge1xuICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgIHRoaXMucHJvY2VzcyA9IHByb2Nlc3M7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvY2Vzc29yXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9jZXNzb3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb2Nlc3NvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wb3N0UHJvY2Vzc29ycyA9IFtdO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHByb2Nlc3NvciBoYXMgZGVwZW5kZW5jaWVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzRGVwZW5kZW5jaWVzKCkge1xuICAgIHJldHVybiB0aGlzLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZGVwZW5kZW5jeSB0byB0aGUgcHJvY2Vzc29yXG4gICAqIEBwYXJhbSB7RGVwZW5kZW5jeX0gZGVwZW5kZW5jeVxuICAgKiBAcmV0dXJucyB7UHJvY2Vzc29yfVxuICAgKi9cbiAgcHJlUHJvY2VzcyhkZXBlbmRlbmN5KSB7XG4gICAgdGhpcy5kZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNhbGxiYWNrIHByb2Nlc3MgdGhlIG91dHB1dCBwcm9jZXNzXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvY2Vzc29yfVxuICAgKi9cbiAgcG9zdFByb2Nlc3MoY2FsbGJhY2spIHtcbiAgICB0aGlzLnBvc3RQcm9jZXNzb3JzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIHByZSBwcm9jZXNzXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3J9XG4gICAqL1xuICBwZXJmb3JtUHJlUHJvY2VzcygpIHtcbiAgICB0aGlzLmRlcGVuZGVuY2llcy5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiB7XG4gICAgICBkZXBlbmRlbmN5LnByb2Nlc3MoZGVwZW5kZW5jeS5wcm9jZXNzb3IuX3Jlc3VsdHMsIHRoaXMpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIHBvc3QgcHJvY2VzcyBhZnRlciB0aGUgcHJvY2VzcyBoYXMgZW5kZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHBlcmZvcm1Qb3N0UHJvY2VzcyhkYXRhKSB7XG4gICAgdGhpcy5fcmVzdWx0cyA9IGRhdGE7XG4gICAgbGV0IGRhdGFUb1Byb2Nlc3MgPSBkYXRhO1xuXG4gICAgdGhpcy5wb3N0UHJvY2Vzc29ycy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgZGF0YVRvUHJvY2VzcyA9IGNhbGxiYWNrKGRhdGFUb1Byb2Nlc3MpO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhVG9Qcm9jZXNzO1xuICB9XG59XG4iLCJpbXBvcnQge0FuYWx5dGljcywgQW5hbHl0aWNzT2JqZWN0LCBBbmFseXRpY3NIZWFkZXJzfSBmcm9tICcuL2ltcGwvYW5hbHl0aWNzLmpzJztcbmltcG9ydCB7RXZlbnRBbmFseXRpY3N9IGZyb20gJy4vaW1wbC9ldmVudC1hbmFseXRpY3MuanMnO1xuaW1wb3J0IHtTUUxWaWV3RGF0YX0gZnJvbSAnLi9pbXBsL3NxbC12aWV3LmpzJztcbmltcG9ydCB7T3JnYW5pc2F0aW9uVW5pdH0gZnJvbSAnLi9pbXBsL29yZ2FuaXNhdGlvbi11bml0LmpzJztcbmltcG9ydCBQcm9ncmVzc1Byb21pc2UgZnJvbSAncHJvZ3Jlc3MtcHJvbWlzZSc7XG5pbXBvcnQgeyBSdW5uZXIgfSBmcm9tICcuL2NvcmUvcnVubmVyLmpzJztcbmltcG9ydCB7IERlcGVuZGVuY3kgfSBmcm9tICcuL2NvcmUvcHJvY2Vzc29yJztcbmltcG9ydCB7IE11bHRpRmV0Y2hlciB9IGZyb20gJy4vY29yZS9tdWx0aS1mZXRjaGVyJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIGhvbGRlciBmb3IgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiB0aGUgZnVuY3Rpb25cbiAqIEB0eXBlIHt7UHJvbWlzZTogUHJvZ3Jlc3NQcm9taXNlLCBBbmFseXRpY3M6IEFuYWx5dGljcyxcbiAgKiAgIEFuYWx5dGljc09iamVjdDogQW5hbHl0aWNzT2JqZWN0LCBBbmFseXRpY3NIZWFkZXJzOiBBbmFseXRpY3NIZWFkZXJzLFxuICAqICAgT3JnYW5pc2F0aW9uVW5pdDogT3JnYW5pc2F0aW9uVW5pdCwgU1FMVmlld0RhdGE6IFNRTFZpZXdEYXRhLFxuICAqICAgUnVubmVyOiBSdW5uZXIsIERlcGVuZGVuY3k6IERlcGVuZGVuY3ksIE11bHRpRmV0Y2hlcjogTXVsdGlGZXRjaGVyLFxuICAqICAgYWxsOiAoZnVuY3Rpb24oRmV0Y2hlcltdKSksIGluaXQ6IChmdW5jdGlvbigqPSkpfVxuICAqIH1cbiAqL1xubGV0IEZuID0ge1xuICBQcm9taXNlOiBQcm9ncmVzc1Byb21pc2UsXG4gIEFuYWx5dGljczogQW5hbHl0aWNzLFxuICBFdmVudEFuYWx5dGljczogRXZlbnRBbmFseXRpY3MsXG4gIEFuYWx5dGljc09iamVjdDogQW5hbHl0aWNzT2JqZWN0LFxuICBBbmFseXRpY3NIZWFkZXJzOiBBbmFseXRpY3NIZWFkZXJzLFxuICBPcmdhbmlzYXRpb25Vbml0OiBPcmdhbmlzYXRpb25Vbml0LFxuICBTUUxWaWV3RGF0YTogU1FMVmlld0RhdGEsXG4gIFJ1bm5lcjogUnVubmVyLFxuICBEZXBlbmRlbmN5OiBEZXBlbmRlbmN5LFxuICBNdWx0aUZldGNoZXI6IE11bHRpRmV0Y2hlcixcbiAgLyoqXG4gICAqIEFkZHMgbXVsdGlwbGUgZmV0Y2hlcnMgaW4gcXVldWUgZm9yIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtGZXRjaGVyW119IGZldGNoZXJzIC0gVGhlIGZldGhlcnMgaXMgYW4gYXJyYXkgb2YgdGhlIGZldGNoZXJzXG4gICAqIEByZXR1cm5zIHtQcm9ncmVzc1Byb21pc2V9IC0gUHJvZ3Jlc3MgUHJvbWlzZSBmb3IgZmV0Y2hpbmcgdGhlIHZhcmlvdXMgZmV0Y2hlcnNcbiAgICogQGV4YW1wbGVcbiAgICogRm4uYWxsKFtuZXcgRm4uQW5hbHl0aWNzKCksIG5ldyBGbi5PcmdhbmlzYXRpb25Vbml0KCldKTtcbiAgICovXG4gIGFsbDogKGZldGNoZXJzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBNdWx0aUZldGNoZXIoZmV0Y2hlcnMpO1xuICB9LFxuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgcnVubmluZyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWd1cmF0aW9uIC0gVGhlIGZldGhlcnMgaXMgYW4gYXJyYXkgb2YgdGhlIGZldGNoZXJzXG4gICAqIEByZXR1cm5zIHtQcm9ncmVzc1Byb21pc2V9IC0gUHJvZ3Jlc3MgUHJvbWlzZSBmb3IgZmV0Y2hpbmcgdGhlIHZhcmlvdXMgZmV0Y2hlcnNcbiAgICogQGV4YW1wbGVcbiAgICogRm4uYWxsKHtiYXNlVXJsOicnfSk7XG4gICAqL1xuICBpbml0OiAoY29uZmlnKT0+e1xuICAgIFJ1bm5lci5pbml0aWF0ZVJ1bm5lcihjb25maWcpO1xuICB9XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LkZuID0gRm47XG59XG5leHBvcnQgeyBGbiB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJy4vYW5hbHl0aWNzJztcblxuLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgdGhlIEV2ZW50IEFuYWx5dGljcyBGZXRjaGVyIGZvciBwcm9jZXNzaW5nIGFuYWx5dGljcyBjYWxsc1xuICpcbiAqIEBleHRlbmRzIEZldGNoZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50QW5hbHl0aWNzIGV4dGVuZHMgQW5hbHl0aWNzIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIFByb2dyYW0gZm9yIHRoZSBmZXRjaFxuICAgKiBAcGFyYW0gcHJvZ3JhbVxuICAgKiBAcmV0dXJucyB7RXZlbnRBbmFseXRpY3N9XG4gICAqL1xuICBzZXRQcm9ncmFtKHByb2dyYW0pIHtcbiAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1cmwgZm9yIGZldGNoaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdXJsKCkge1xuICAgIHJldHVybiAnYW5hbHl0aWNzL2V2ZW50cy9xdWVyeS8nICsgdGhpcy5wcm9ncmFtICsgJz8nICsgdGhpcy5fdXJsUGFyYW1ldGVycztcbiAgfVxufVxuIiwiaW1wb3J0IHsgRmV0Y2hlciB9IGZyb20gJy4uL2NvcmUvZmV0Y2hlcic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGZldGNoZXIgdG8gbG9hZCBzcWwgdmlldyBkYXRhXG4gKlxuICogQGV4dGVuZHMgRmV0Y2hlclxuICovXG5leHBvcnQgY2xhc3MgU1FMVmlld0RhdGEgZXh0ZW5kcyBGZXRjaGVyIHtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgU1FMVmlld0RhdGEgSW5zdGFuY2VcbiAgICogQHBhcmFtIGlkXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1cmwgZm9yIGZldGNoaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdXJsKCkge1xuICAgIHZhciB1cmwgPSAnc3FsVmlld3MvJyArIHRoaXMuX2lkICsgJy9kYXRhLmpzb24nO1xuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSWRlbnRpZmlhYmxlT2JqZWN0IH0gZnJvbSAnLi4vY29yZS9pZGVudGlmaWFibGUtb2JqZWN0JztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBmZXRjaGVyIGZvciB0aGUgb3JnYW5pc2F0aW9uIHVuaXRcbiAqXG4gKiBAZXh0ZW5kcyBJZGVudGlmaWFibGVPYmplY3RcbiAqL1xuZXhwb3J0IGNsYXNzIE9yZ2FuaXNhdGlvblVuaXQgZXh0ZW5kcyBJZGVudGlmaWFibGVPYmplY3Qge1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuYW1lIGZvciBmZXRjaGluZyB0aGUgaWRlbnRpZmlhYmxlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuICdvcmdhbmlzYXRpb25Vbml0cyc7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZldGNoZXIgfSBmcm9tICcuLi9jb3JlL2ZldGNoZXInO1xuXG5leHBvcnQgY2xhc3MgSWRlbnRpZmlhYmxlT2JqZWN0IGV4dGVuZHMgRmV0Y2hlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlsdGVycyA9IFtdO1xuICB9XG4gIGdldCBuYW1lKCkge1xuICAgIHRocm93IEVycm9yKCdPYmplY3QgbmFtZSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuICB3aGVyZShyaWdodCwgb3BlcmF0b3IsIGxlZnQpIHtcbiAgICB0aGlzLl9maWx0ZXJzLnB1c2goe1xuICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgICAgbGVmdDogbGVmdFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IHVybCgpIHtcbiAgICB2YXIgdXJsID0gdGhpcy5fdXJsUGFyYW1ldGVycztcblxuICAgIHRoaXMuX2ZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICB1cmwgKz0gJ2ZpbHRlcj0nICsgZmlsdGVyLnJpZ2h0O1xuICAgICAgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gJz09Jykge1xuICAgICAgICB1cmwgKz0gJzplcTonICsgZmlsdGVyLmxlZnQ7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gJzwnKSB7XG4gICAgICAgIHVybCArPSAnOmx0OicgKyBmaWx0ZXIubGVmdDtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICAgIHVybCArPSAnOmxlOicgKyBmaWx0ZXIubGVmdDtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm9wZXJhdG9yID09PSAnPicpIHtcbiAgICAgICAgdXJsICs9ICc6Z3Q6JyArIGZpbHRlci5sZWZ0O1xuICAgICAgfSBlbHNlIGlmIChmaWx0ZXIub3BlcmF0b3IgPT09ICc+PScpIHtcbiAgICAgICAgdXJsICs9ICc6Z2U6JyArIGZpbHRlci5sZWZ0O1xuICAgICAgfSBlbHNlIGlmIChmaWx0ZXIub3BlcmF0b3IgPT09ICc8PicpIHtcbiAgICAgICAgdXJsICs9ICc6IWVxOicgKyBmaWx0ZXIubGVmdDtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm9wZXJhdG9yID09PSAnaW4nIHx8IGZpbHRlci5vcGVyYXRvciA9PT0gJyFpbicpIHtcbiAgICAgICAgdXJsICs9ICc6JyArIGZpbHRlci5vcGVyYXRvciArICc6WycgKyBmaWx0ZXIubGVmdCArICddJztcbiAgICAgIH0gZWxzZSBpZiAoIWZpbHRlci5sZWZ0KSB7XG4gICAgICAgIHVybCArPSAnOicgKyBmaWx0ZXIub3BlcmF0b3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgKz0gJzonICsgZmlsdGVyLm9wZXJhdG9yICsgJzonICsgZmlsdGVyLmxlZnQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMubmFtZSArICcuanNvbj8nICsgdXJsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBSdW5uZXIgfSBmcm9tICcuL3J1bm5lcic7XG5pbXBvcnQgeyBGZXRjaGVyIH0gZnJvbSAnLi9mZXRjaGVyJztcblxuZXhwb3J0IGNsYXNzIE11bHRpRmV0Y2hlciBleHRlbmRzIEZldGNoZXIge1xuICBjb25zdHJ1Y3RvcihmZXRjaGVycykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmV0Y2hlcnMgPSBmZXRjaGVycztcbiAgfVxuICBnZXQgZmV0Y2hlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoZXJzO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiAobmV3IFJ1bm5lcigpKS5nZXRBbGxSZXN1bHRzKHRoaXMpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9