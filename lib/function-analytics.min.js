!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("function-analytics",[],t):"object"==typeof exports?exports["function-analytics"]=t():e["function-analytics"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=13)}([function(e,t,n){"use strict";var r=n(8),o=n(16),i=Object.prototype.toString;function u(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function a(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:u,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:a,isStream:function(e){return s(e)&&a(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fetcher=void 0;var r,o=n(3),i=n(12),u=(r=n(4))&&r.__esModule?r:{default:r};function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))).parameters={},e}var n,r,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,i.Processor),n=t,(r=[{key:"get",value:function(){return(new o.Runner).getResults(this)}},{key:"setParameters",value:function(e){var t=this;return Object.keys(e).forEach(function(n){t.parameters[n]=e[n]}),this}},{key:"getDependecyFetchResults",value:function(){var e=this.dependencies.map(function(e){return(new o.Runner).getResults(e.processor)});return u.default.all(e)}},{key:"_encode64",value:function(e){return btoa(new Uint8Array(e).reduce(function(e,t){return e+String.fromCharCode(t)},""))}},{key:"hash",value:function(){return this.url}},{key:"_urlParameters",get:function(){var e=this,t="";return Object.keys(this.parameters).forEach(function(n){""!==t&&(t+="&"),"string"==typeof e.parameters[n]?t+=n+"="+e.parameters[n]:Object.keys(e.parameters[n]).forEach(function(r){""!==t&&(t+="&"),""===e.parameters[n][r]?t+=n+"="+r:t+=n+"="+r+":"+e.parameters[n][r]})}),t}},{key:"url",get:function(){throw new Error("Should implement url generation")}}])&&a(n.prototype,r),s&&a(n,s),t}();t.Fetcher=l},function(e,t,n){"use strict";var r=n(0),o=n(19),i=n(21),u=n(22),s=n(23),a=n(9),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(24);e.exports=function(e){return new Promise(function(t,f){var l=e.data,p=e.headers;r.isFormData(l)&&delete p["Content-Type"];var h=new XMLHttpRequest,y="onreadystatechange",d=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(e.url)||(h=new window.XDomainRequest,y="onload",d=!0,h.onprogress=function(){},h.ontimeout=function(){}),e.auth){var m=e.auth.username||"",b=e.auth.password||"";p.Authorization="Basic "+c(m+":"+b)}if(h.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h[y]=function(){if(h&&(4===h.readyState||d)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?u(h.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:e,request:h};o(t,f,r),h=null}},h.onerror=function(){f(a("Network Error",e,null,h)),h=null},h.ontimeout=function(){f(a("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var v=n(25),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;g&&(p[e.xsrfHeaderName]=g)}if("setRequestHeader"in h&&r.forEach(p,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:h.setRequestHeader(t,e)}),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){h&&(h.abort(),f(e),h=null)}),void 0===l&&(l=null),h.send(l)})}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.Runner=void 0;var r,o=a(n(4)),i=a(n(14)),u=a(n(2)),s=a(n(2));function a(e){return e&&e.__esModule?e:{default:e}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,a,f;return n=t,f=[{key:"initiateRunner",value:function(e){t.instance||(this.config=e,this.cache={},r=this)}}],(a=[{key:"_fetch",value:function(t,n,o){if(!r){throw Error('Configration not set please configre function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}var a={url:r.config.baseUrl+t.url,method:"get",adapter:void 0!==e?u.default:s.default};r.config.username&&r.config.password&&(a.auth={username:r.config.username,password:r.config.password}),i.default.request(a).then(function(e){n(t.performPostProcess(e.data))},function(e){o(e)})}},{key:"getResults",value:function(e){var t=this;if(e._fetchers)return this.getAllResults(e);var n=e.hash();return r.cache[n]||(r.cache[n]=new o.default(function(n,r,o){e.hasDependencies()?e.getDependecyFetchResults().then(function(){e.performPreProcess(),t._fetch(e,n,r)}).catch(function(e){console.log("Errrrrrrrrrr:",e),r()}):t._fetch(e,n,r)})),r.cache[n]}},{key:"getAllResults",value:function(e){return new o.default(function(n,r,i){var u=e.fetchers.map(function(e){return(new t).getResults(e)});return o.default.all(u).then(function(t){n(e.performPostProcess(t))}).catch(function(e){r(e)})})}},{key:"instance",get:function(){return r}},{key:"config",set:function(e){this.config=e},get:function(){return this.config}}])&&c(n.prototype,a),f&&c(n,f),t}();t.Runner=f}).call(this,n(7))},function(e,t,n){"use strict";const r=Symbol?Symbol():"__listeners";class o extends Promise{constructor(e){super((t,n)=>e(t,n,e=>{try{return this[r].forEach(t=>t(e))}catch(e){n(e)}})),this[r]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[r].push(e),this}static all(e){const t=new Array(e.length),n=e.length;let r=0;return new o((o,i,u)=>{e.forEach((e,s)=>{e.then(e=>{t[s]=e,t.proportion=++r/n,u(t),r===n&&o(t)}).catch(i)})})}static sequence(e,t){const n=[],r=e.length;let i=0;return new o((o,u,s)=>{!function a(){t.call(null,e[n.length]).then(e=>{n.push(e),n.proportion=++i/r,s(n),n.length===r?o(n):a()}).catch(u)}()})}}e.exports=o},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(18),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,a={adapter:("undefined"!=typeof XMLHttpRequest?s=n(2):void 0!==t&&(s=n(2)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(u(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){a.headers[e]={}}),r.forEach(["post","put","patch"],function(e){a.headers[e]=r.merge(i)}),e.exports=a}).call(this,n(7))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Analytics=t.AnalyticsObject=t.AnalyticsHeaders=t.AnalyticsHeader=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function a(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.AnalyticsHeader=function e(){l(this,e)};var p=function(e){function t(e){var n,r;return l(this,t),r=a(this,(n=t.__proto__||Object.getPrototypeOf(t)).call.apply(n,[this].concat(i(e)))),Object.setPrototypeOf(r,Object.create(t.prototype)),r}return c(t,Array),s(t,[{key:"getHeader",value:function(e){var t;return this.forEach(function(n,r){n.name===e&&((t=n).index=r)}),t}},{key:"dx",get:function(){return this.getHeader("dx")}},{key:"pe",get:function(){return this.getHeader("pe")}},{key:"ou",get:function(){return this.getHeader("ou")}},{key:"value",get:function(){return this.getHeader("value")}}]),t}();t.AnalyticsHeaders=p;var h=function(){function e(t){l(this,e),this._data=t}return s(e,[{key:"headers",get:function(){return new p(this._data.headers)}},{key:"metaData",get:function(){return this._data.metaData}},{key:"rows",get:function(){return this._data.rows}},{key:"height",get:function(){return this._data.height}},{key:"width",get:function(){return this._data.width}}]),e}();t.AnalyticsObject=h;var y=function(e){function t(){var e,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return l(this,t),(e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))).parameters.dimension={},e.postProcess(function(t){return e.standardizeAnalytics(t,n)}),e}return c(t,r.Fetcher),s(t,[{key:"setData",value:function(e){return this.setDimension("dx",e),this}},{key:"setPeriod",value:function(e){return this.setDimension("pe",e),this}},{key:"setOrgUnit",value:function(e){return this.setDimension("ou",e),this}},{key:"setDimension",value:function(e,t){return this.parameters.dimension[e]=t||"",this}},{key:"standardizeAnalytics",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(e.count)return e;var n={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(function(e){try{var t=e;n.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{var r=this.getSanitizedAnalyticsMetadata(e.metaData,t);n.metaData=r}catch(e){console.warn("Invalid metadata object")}e.rows&&(n.rows=e.rows)}return n.height=e.height,n.width=e.width,new h(n)}},{key:"getSanitizedAnalyticsMetadata",value:function(e,t){var n={};return e&&(e.ouHierarchy&&(n.ouHierarchy=e.ouHierarchy),t?(n.names={},e.names?n.names=e.names:e.items&&Object.keys(e.items).forEach(function(t){n.names[t]=e.items[t].name}),e.dimensions&&Object.keys(e.dimensions).forEach(function(t){n[t]=e.dimensions[t]})):(n.items={},e.items?n.items=e.items:e.names&&Object.keys(e.items).forEach(function(t){e.items[t]={name:e.names[t]}}),e.dimensions?n.dimensions=e.dimensions:(n.dimensions={},Object.keys(e).forEach(function(t){-1===["names","items","dimensions"].indexOf(t)&&(n.dimensions[t]=e[t])})))),n}},{key:"url",get:function(){return"analytics?"+this._urlParameters}}]),t}();t.Analytics=y},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(e){r=u}}();var a,c=[],f=!1,l=-1;function p(){f&&a&&(f=!1,a.length?c=a.concat(c):l=-1,c.length&&h())}function h(){if(!f){var e=s(p);f=!0;for(var t=c.length;t;){for(a=c,c=[];++l<t;)a&&a[l].run();l=-1,t=c.length}a=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function y(e,t){this.fun=e,this.array=t}function d(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new y(e,t)),1!==c.length||f||s(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(20);e.exports=function(e,t,n,o,i){var u=new Error(e);return r(u,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Processor=t.Dependency=void 0;t.Dependency=function e(t,n){o(this,e),this.processor=t,this.process=n};var i=function(){function e(){o(this,e),this.postProcessors=[],this.dependencies=[]}var t,n,i;return t=e,(n=[{key:"hasDependencies",value:function(){return this.dependencies.length>0}},{key:"preProcess",value:function(e){return this.dependencies.push(e),this}},{key:"postProcess",value:function(e){return this.postProcessors.push(e),this}},{key:"performPreProcess",value:function(){var e=this;return this.dependencies.forEach(function(t){t.process(t.processor._results,e)}),this}},{key:"performPostProcess",value:function(e){this._results=e;var t=e;return this.postProcessors.forEach(function(e){t=e(t)}),t}}])&&r(t.prototype,n),i&&r(t,i),e}();t.Processor=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fn=void 0;var r,o=n(6),i=n(33),u=n(34),s=n(35),a=(r=n(4))&&r.__esModule?r:{default:r},c=n(3),f=n(12),l=n(37);var p={Promise:a.default,Analytics:o.Analytics,EventAnalytics:i.EventAnalytics,AnalyticsObject:o.AnalyticsObject,AnalyticsHeaders:o.AnalyticsHeaders,OrganisationUnit:s.OrganisationUnit,SQLViewData:u.SQLViewData,Runner:c.Runner,Dependency:f.Dependency,MultiFetcher:l.MultiFetcher,all:function(e){return new l.MultiFetcher(e)},init:function(e){c.Runner.initiateRunner(e)}};t.Fn=p,"undefined"!=typeof window&&(window.Fn=p)},function(e,t,n){e.exports=n(15)},function(e,t,n){"use strict";var r=n(0),o=n(8),i=n(17),u=n(5);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var a=s(u);a.Axios=i,a.create=function(e){return s(r.merge(u,e))},a.Cancel=n(11),a.CancelToken=n(31),a.isCancel=n(10),a.all=function(e){return Promise.all(e)},a.spread=n(32),e.exports=a,e.exports.default=a},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(5),o=n(0),i=n(26),u=n(27);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[u,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var u=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),u.push(o(t)+"="+o(e))}))}),i=u.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,u={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(u[t]&&o.indexOf(t)>=0)return;u[t]="set-cookie"===t?(u[t]?u[t]:[]).concat([n]):u[t]?u[t]+", "+n:n}}),u):u}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),u="",s=0,a=r;i.charAt(0|s)||(a="=",s%1);u+=a.charAt(63&t>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return u}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,u){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===u&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(28),i=n(10),u=n(5),s=n(29),a=n(30);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=a(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||u.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(11);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventAnalytics=void 0;var r=n(6);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Analytics),n=t,(o=[{key:"setProgram",value:function(e){return this.program=e,this}},{key:"url",get:function(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}}])&&i(n.prototype,o),a&&i(n,a),t}();t.EventAnalytics=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SQLViewData=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._id=e,n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Fetcher),n=t,(o=[{key:"url",get:function(){return"sqlViews/"+this._id+"/data.json"}}])&&i(n.prototype,o),a&&i(n,a),t}();t.SQLViewData=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OrganisationUnit=void 0;var r=n(36);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.IdentifiableObject),n=t,(o=[{key:"name",get:function(){return"organisationUnits"}}])&&i(n.prototype,o),a&&i(n,a),t}();t.OrganisationUnit=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IdentifiableObject=void 0;var r=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._filters=[],e}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Fetcher),n=t,(o=[{key:"where",value:function(e,t,n){return this._filters.push({right:e,operator:t,left:n}),this}},{key:"name",get:function(){throw Error("Object name not implemented")}},{key:"url",get:function(){var e=this._urlParameters;return this._filters.forEach(function(t){""!==e&&(e+="&"),e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),console.log(this.name+".json?"+e),this.name+".json?"+e}}])&&i(n.prototype,o),a&&i(n,a),t}();t.IdentifiableObject=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MultiFetcher=void 0;var r=n(3),o=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)))._fetchers=e,n}var n,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,o.Fetcher),n=t,(i=[{key:"get",value:function(){return(new r.Runner).getAllResults(this)}},{key:"fetchers",get:function(){return this._fetchers}}])&&u(n.prototype,i),c&&u(n,c),t}();t.MultiFetcher=c}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,