!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("function-analytics",[],t):"object"==typeof exports?exports["function-analytics"]=t():e["function-analytics"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(e,t,r){"use strict";var n=r(6),o=r(12),s=Object.prototype.toString;function i(e){return"[object Array]"===s.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===s.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",function(){return f});var n=r(2),o=r.n(n),s=r(10),i=r.n(s),a=r(3),u=r.n(a);let c;class f{static initiateRunner(e){f.instance||(this.config=e,this.cache={},c=this)}get instance(){return c}set config(e){this.config=e}get config(){return this.config}_fetch(e,t,r){if(!c){throw Error('Configration not set please configre function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}const n={url:c.config.baseUrl+e.url,method:"get",adapter:u.a};c.config.username&&c.config.password&&(n.auth={username:c.config.username,password:c.config.password}),i.a.request(n).then(r=>{t(e.performPostProcess(r.data))},e=>{r(e)})}getResults(e){if(e._fetchers)return this.getAllResults(e);let t=e.hash();return c.cache[t]||(c.cache[t]=new o.a((t,r,n)=>{e.hasDependencies()?e.getDependecyFetchResults().then(()=>{e.performPreProcess(),this._fetch(e,t,r)}).catch(e=>{console.log("Errrrrrrrrrr:",e),r()}):this._fetch(e,t,r)})),c.cache[t]}getAllResults(e){return new o.a((t,r,n)=>{const s=e.fetchers.map(e=>(new f).getResults(e));return o.a.all(s).then(r=>{t(e.performPostProcess(r))}).catch(e=>{r(e)})})}}}).call(this,r(5))},function(e,t,r){"use strict";const n=Symbol?Symbol():"__listeners";class o extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[n].forEach(t=>t(e))}catch(e){r(e)}})),this[n]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[n].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new o((o,s,i)=>{e.forEach((e,a)=>{e.then(e=>{t[a]=e,t.proportion=++n/r,i(t),n===r&&o(t)}).catch(s)})})}static sequence(e,t){const r=[],n=e.length;let s=0;return new o((o,i,a)=>{!function u(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++s/n,a(r),r.length===n?o(r):u()}).catch(i)}()})}}e.exports=o},function(e,t,r){"use strict";var n=r(0),o=r(15),s=r(17),i=r(18),a=r(19),u=r(7),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(20);e.exports=function(e){return new Promise(function(t,f){var l=e.data,h=e.headers;n.isFormData(l)&&delete h["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||a(e.url)||(p=new window.XDomainRequest,d="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var g=e.auth.username||"",y=e.auth.password||"";h.Authorization="Basic "+c(g+":"+y)}if(p.open(e.method.toUpperCase(),s(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[d]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:r,config:e,request:p};o(t,f,n),p=null}},p.onerror=function(){f(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var w=r(21),v=(e.withCredentials||a(e.url))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;v&&(h[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&n.forEach(h,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete h[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),f(e),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(e,t,r){"use strict";(function(t){var n=r(0),o=r(14),s={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=r(3):void 0!==t&&(a=r(3)),a),transformRequest:[function(e,t){return o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){u.headers[e]={}}),n.forEach(["post","put","patch"],function(e){u.headers[e]=n.merge(s)}),e.exports=u}).call(this,r(5))},function(e,t){var r,n,o=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],f=!1,l=-1;function h(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!f){var e=a(h);f=!0;for(var t=c.length;t;){for(u=c,c=[];++l<t;)u&&u[l].run();l=-1,t=c.length}u=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new d(e,t)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(16);e.exports=function(e,t,r,o,s){var i=new Error(e);return n(i,t,r,o,s)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){e.exports=r(11)},function(e,t,r){"use strict";var n=r(0),o=r(6),s=r(13),i=r(4);function a(e){var t=new s(e),r=o(s.prototype.request,t);return n.extend(r,s.prototype,t),n.extend(r,t),r}var u=a(i);u.Axios=s,u.create=function(e){return a(n.merge(i,e))},u.Cancel=r(9),u.CancelToken=r(27),u.isCancel=r(8),u.all=function(e){return Promise.all(e)},u.spread=r(28),e.exports=u,e.exports.default=u},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(4),o=r(0),s=r(22),i=r(23);function a(e){this.defaults=e,this.interceptors={request:new s,response:new s}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,r){return this.request(o.merge(r||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,r,n){return this.request(o.merge(n||{},{method:e,url:t,data:r}))}}),e.exports=a},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(7);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},function(e,t,r){"use strict";var n=r(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var s;if(r)s=r(t);else if(n.isURLSearchParams(t))s=t.toString();else{var i=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),s=i.join("&")}return s&&(e+=(-1===e.indexOf("?")?"?":"&")+s),e}},function(e,t,r){"use strict";var n=r(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,s,i={};return e?(n.forEach(e.split("\n"),function(e){if(s=e.indexOf(":"),t=n.trim(e.substr(0,s)).toLowerCase(),r=n.trim(e.substr(s+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}}),i):i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,s=String(e),i="",a=0,u=n;s.charAt(0|a)||(u="=",a%1);i+=u.charAt(63&t>>8-a%1*8)){if((r=s.charCodeAt(a+=.75))>255)throw new o;t=t<<8|r}return i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,r){"use strict";var n=r(0),o=r(24),s=r(8),i=r(4),a=r(25),u=r(26);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(9);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);var n=r(1);class o{constructor(){this.postProcessors=[],this.dependencies=[]}hasDependencies(){return this.dependencies.length>0}preProcess(e){return this.dependencies.push(e),this}postProcess(e){return this.postProcessors.push(e),this}performPreProcess(){return this.dependencies.forEach(e=>{e.process(e.processor._results,this)}),this}performPostProcess(e){this._results=e;let t=e;return this.postProcessors.forEach(e=>{t=e(t)}),t}}var s=r(2),i=r.n(s);class a extends o{constructor(){super(),this.parameters={}}get _urlParameters(){let e="";return Object.keys(this.parameters).forEach(t=>{""!==e&&(e+="&"),"string"==typeof this.parameters[t]?e+=t+"="+this.parameters[t]:Object.keys(this.parameters[t]).forEach(r=>{""!==e&&(e+="&"),""===this.parameters[t][r]?e+=t+"="+r:e+=t+"="+r+":"+this.parameters[t][r]})}),e}get url(){throw new Error("Should implement url generation")}get(){return(new n.a).getResults(this)}setParameters(e){return Object.keys(e).forEach(t=>{this.parameters[t]=e[t]}),this}getDependecyFetchResults(){const e=this.dependencies.map(e=>(new n.a).getResults(e.processor));return i.a.all(e)}_encode64(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}hash(){return this.url}}class u{constructor(e){this._data=e}get headers(){return this._data.headers}get metaData(){return this._data.metaData}get rows(){return this._data.rows}get height(){return this._data.height}get width(){return this._data.width}}class c extends a{constructor(e=!0){super(),this.parameters.dimension={},this.postProcess(t=>this.standardizeAnalytics(t,e))}setData(e){return this.setDimension("dx",e),this}setPeriod(e){return this.setDimension("pe",e),this}setOrgUnit(e){return this.setDimension("ou",e),this}setDimension(e,t){return this.parameters.dimension[e]=t||"",this}standardizeAnalytics(e,t=!0){if(e.count)return e;let r={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(e=>{try{let t=e;r.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{let n=this.getSanitizedAnalyticsMetadata(e.metaData,t);r.metaData=n}catch(e){console.warn("Invalid metadata object")}e.rows&&(r.rows=e.rows)}return r.height=e.height,r.width=e.width,new u(r)}getSanitizedAnalyticsMetadata(e,t){let r={};return e&&(e.ouHierarchy&&(r.ouHierarchy=e.ouHierarchy),t?(r.names={},e.names?r.names=e.names:e.items&&Object.keys(e.items).forEach(t=>{r.names[t]=e.items[t].name}),e.dimensions&&Object.keys(e.dimensions).forEach(t=>{r[t]=e.dimensions[t]})):(r.items={},e.items?r.items=e.items:e.names&&Object.keys(e.items).forEach(t=>{e.items[t]={name:e.names[t]}}),e.dimensions?r.dimensions=e.dimensions:(r.dimensions={},Object.keys(e).forEach(t=>{-1===["names","items","dimensions"].indexOf(t)&&(r.dimensions[t]=e[t])})))),r}get url(){return"analytics?"+this._urlParameters}}class f extends a{constructor(e){super(),this._fetchers=e}get fetchers(){return this._fetchers}get(){return(new n.a).getAllResults(this)}}r.d(t,"Fn",function(){return l});let l={Promise:i.a,Analytics:c,EventAnalytics:class extends c{setProgram(e){return this.program=e,this}get url(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}},AnalyticsResult:u,IdentifiableObject:class extends a{constructor(e){super(),this._filters=[],this.objectName=e}get name(){return this.objectName}where(e,t,r){return this._filters.push({right:e,operator:t,left:r}),this}get url(){var e=this._urlParameters;return this._filters.forEach(t=>{""!==e&&(e+="&"),e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),this.name+".json?"+e}},SQLViewData:class extends a{constructor(e){super(),this._id=e,this.parameters.var={}}setVariable(e,t){return this.parameters.var[e]=t||"",this}get url(){return"sqlViews/"+this._id+"/data.json?"+this._urlParameters}},Runner:n.a,Dependency:class{constructor(e,t){this.processor=e,this.process=t}},MultiFetcher:f,all:e=>new f(e),init:e=>{n.a.initiateRunner(e)}};"undefined"!=typeof window&&(window.Fn=l)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,