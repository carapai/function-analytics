!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("function-analytics",[],t):"object"==typeof exports?exports["function-analytics"]=t():e["function-analytics"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(e,t,r){"use strict";var n=r(6),s=r(12),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.call(null,e[s],s,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:s,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,s=arguments.length;n<s;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,s){e[s]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",function(){return f});var n=r(3),s=r.n(n),o=r(10),i=r.n(o),a=r(2),u=r.n(a);let c;class f{static initiateRunner(e){f.instance||(this.config=e,this.cache={},c=this)}get instance(){return c}set config(e){this.config=e}get config(){return this.config}_fetch(e,t,r){if(!c){throw Error('Configration not set please configre function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}const n={url:c.config.baseUrl+e.url,method:"get",adapter:u.a};c.config.username&&c.config.password&&(n.auth={username:c.config.username,password:c.config.password}),i.a.request(n).then(r=>{t(e.performPostProcess(r.data))},e=>{r(e)})}getResults(e){if(e._fetchers)return this.getAllResults(e);let t=e.hash();return c.cache[t]||(c.cache[t]=new s.a((t,r,n)=>{e.hasDependencies()?e.getDependecyFetchResults().then(()=>{e.performPreProcess(),this._fetch(e,t,r)}).catch(e=>{console.log("Errrrrrrrrrr:",e),r()}):this._fetch(e,t,r)})),c.cache[t]}getAllResults(e){return new s.a((t,r,n)=>{const o=e.fetchers.map(e=>(new f).getResults(e));return s.a.all(o).then(r=>{t(e.performPostProcess(r))}).catch(e=>{r(e)})})}}}).call(this,r(5))},function(e,t,r){"use strict";var n=r(0),s=r(15),o=r(17),i=r(18),a=r(19),u=r(7),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(20);e.exports=function(e){return new Promise(function(t,f){var h=e.data,l=e.headers;n.isFormData(h)&&delete l["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||a(e.url)||(p=new window.XDomainRequest,d="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var g=e.auth.username||"",y=e.auth.password||"";l.Authorization="Basic "+c(g+":"+y)}if(p.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[d]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:r,config:e,request:p};s(t,f,n),p=null}},p.onerror=function(){f(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var w=r(21),v=(e.withCredentials||a(e.url))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;v&&(l[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&n.forEach(l,function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete l[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),f(e),p=null)}),void 0===h&&(h=null),p.send(h)})}},function(e,t,r){"use strict";const n=Symbol?Symbol():"__listeners";class s extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[n].forEach(t=>t(e))}catch(e){r(e)}})),this[n]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[n].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new s((s,o,i)=>{e.forEach((e,a)=>{e.then(e=>{t[a]=e,t.proportion=++n/r,i(t),n===r&&s(t)}).catch(o)})})}static sequence(e,t){const r=[],n=e.length;let o=0;return new s((s,i,a)=>{!function u(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++o/n,a(r),r.length===n?s(r):u()}).catch(i)}()})}}e.exports=s},function(e,t,r){"use strict";(function(t){var n=r(0),s=r(14),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=r(2):void 0!==t&&(a=r(2)),a),transformRequest:[function(e,t){return s(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){u.headers[e]={}}),n.forEach(["post","put","patch"],function(e){u.headers[e]=n.merge(o)}),e.exports=u}).call(this,r(5))},function(e,t){var r,n,s=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],f=!1,h=-1;function l(){f&&u&&(f=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!f){var e=a(l);f=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new d(e,t)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(16);e.exports=function(e,t,r,s,o){var i=new Error(e);return n(i,t,r,s,o)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){e.exports=r(11)},function(e,t,r){"use strict";var n=r(0),s=r(6),o=r(13),i=r(4);function a(e){var t=new o(e),r=s(o.prototype.request,t);return n.extend(r,o.prototype,t),n.extend(r,t),r}var u=a(i);u.Axios=o,u.create=function(e){return a(n.merge(i,e))},u.Cancel=r(9),u.CancelToken=r(27),u.isCancel=r(8),u.all=function(e){return Promise.all(e)},u.spread=r(28),e.exports=u,e.exports.default=u},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(4),s=r(0),o=r(22),i=r(23);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=s.merge({url:arguments[0]},arguments[1])),(e=s.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},s.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,r){return this.request(s.merge(r||{},{method:e,url:t}))}}),s.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,r,n){return this.request(s.merge(n||{},{method:e,url:t,data:r}))}}),e.exports=a},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(7);e.exports=function(e,t,r){var s=r.config.validateStatus;r.status&&s&&!s(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,s){return e.config=t,r&&(e.code=r),e.request=n,e.response=s,e}},function(e,t,r){"use strict";var n=r(0);function s(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(n.isURLSearchParams(t))o=t.toString();else{var i=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(s(t)+"="+s(e))}))}),o=i.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,r){"use strict";var n=r(0),s=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,i={};return e?(n.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=n.trim(e.substr(0,o)).toLowerCase(),r=n.trim(e.substr(o+1)),t){if(i[t]&&s.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}}),i):i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function s(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=s(window.location.href),function(t){var r=n.isString(t)?s(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function s(){this.message="String contains an invalid character"}s.prototype=new Error,s.prototype.code=5,s.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,o=String(e),i="",a=0,u=n;o.charAt(0|a)||(u="=",a%1);i+=u.charAt(63&t>>8-a%1*8)){if((r=o.charCodeAt(a+=.75))>255)throw new s;t=t<<8|r}return i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,s,o,i){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(s)&&a.push("path="+s),n.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(0);function s(){this.handlers=[]}s.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},s.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},s.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=s},function(e,t,r){"use strict";var n=r(0),s=r(24),o=r(8),i=r(4),a=r(25),u=r(26);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=s(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return c(e),t.data=s(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=s(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(9);function s(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}s.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},s.source=function(){var e;return{token:new s(function(t){e=t}),cancel:e}},e.exports=s},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);var n=r(1);class s{constructor(){this.postProcessors=[],this.dependencies=[]}hasDependencies(){return this.dependencies.length>0}preProcess(e){return this.dependencies.push(e),this}addPreProcess(e){return this.dependencies.push(e),this}postProcess(e){return this.postProcessors.push(e),this}addPostProcess(e){return this.postProcessors.push(e),this}performPreProcess(){return this.dependencies.forEach(e=>{e.processCallback(e.process._results,this)}),this}performPostProcess(e){this._results=e;let t=e;return this.postProcessors.forEach(e=>{t=e(t)}),t}}var o=r(3),i=r.n(o);class a extends s{constructor(){super(),this.parameters={}}get _urlParameters(){let e="";return Object.keys(this.parameters).forEach(t=>{""!==e&&(e+="&"),"string"==typeof this.parameters[t]?e+=t+"="+this.parameters[t]:Object.keys(this.parameters[t]).forEach(r=>{""!==e&&(e+="&"),""===this.parameters[t][r]?e+=t+"="+r:e+=t+"="+r+":"+this.parameters[t][r]})}),e}get url(){throw new Error("Should implement url generation")}get(){return(new n.a).getResults(this)}setParameters(e){return Object.keys(e).forEach(t=>{this.parameters[t]=e[t]}),this}getDependecyFetchResults(){const e=this.dependencies.map(e=>(new n.a).getResults(e.process));return i.a.all(e)}_encode64(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}hash(){return this.url}}class u{constructor(e,t,r){this.row=e,this.headers=t,this.metaData=r}dimension(e){var t=-1,r="";return this.headers.forEach((r,n)=>{r.name===e&&(t=n)}),this.metaData.names?r=this.metaData.names[this.row[t]]:this.metaData.items&&(r=this.metaData.items[this.row[t]]?this.metaData.items[this.row[t]].name:void 0),{id:this.row[t],name:r,path:this.metaData.ouHierarchy&&void 0!==this.metaData.ouHierarchy[this.row[t]]?this.metaData.ouHierarchy[this.row[t]]:void 0}}get dx(){return this.dimension("dx")}get pe(){return this.dimension("pe")}get ou(){return this.dimension("ou")}get value(){return this.dimension("value").id}}class c{constructor(e){this._data=e}get headers(){return this._data.headers}get metaData(){return this._data.metaData}get rows(){let e=[];return this._data.rows.forEach(t=>{e.push(new u(t,this.headers,this.metaData))}),e}get height(){return this._data.height}get width(){return this._data.width}}class f extends a{constructor(e=25){super(),"boolean"==typeof e&&(e=e?25:26),this.parameters.dimension={},this.postProcess(t=>this.standardizeAnalytics(t,e))}setData(e){return this.setDimension("dx",e),this}setPeriod(e){return this.setDimension("pe",e),this}setOrgUnit(e){return this.setDimension("ou",e),this}setDimension(e,t){return this.parameters.dimension[e]=t||"",this}standardizeAnalytics(e,t=25){if("boolean"==typeof t&&(t=t?25:26),e.count)return e;let r={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(e=>{try{let t=e;r.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{let n=this.getSanitizedAnalyticsMetadata(e.metaData,t);r.metaData=n}catch(e){console.warn("Invalid metadata object")}e.rows&&(r.rows=e.rows)}return r.height=e.height,r.width=e.width,new c(r)}getSanitizedAnalyticsMetadata(e,t){let r={};return e&&(e.ouHierarchy&&(r.ouHierarchy=e.ouHierarchy),t<26?(r.names={},e.names?r.names=e.names:e.items&&Object.keys(e.items).forEach(t=>{r.names[t]=e.items[t].name}),e.dimensions&&Object.keys(e.dimensions).forEach(t=>{r[t]=e.dimensions[t]})):(r.items={},e.items?r.items=e.items:e.names&&Object.keys(e.items).forEach(t=>{e.items[t]={name:e.names[t]}}),e.dimensions?r.dimensions=e.dimensions:(r.dimensions={},Object.keys(e).forEach(t=>{-1===["names","items","dimensions"].indexOf(t)&&(r.dimensions[t]=e[t])})))),r}get url(){return"analytics?"+this._urlParameters}}const h=Symbol?Symbol():"__listeners";class l extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[h].forEach(t=>t(e))}catch(e){r(e)}})),this[h]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[h].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new l((s,o,i)=>{e.forEach((e,a)=>{e.then(e=>{t[a]=e,t.proportion=++n/r,i(t),n===r&&s(t)}).catch(o)})})}static sequence(e,t){const r=[],n=e.length;let s=0;return new l((o,i,a)=>{!function u(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++s/n,a(r),r.length===n?o(r):u()}).catch(i)}()})}}class p extends a{constructor(e){super(),this._fetchers=e}get fetchers(){return this._fetchers}get(){return(new n.a).getAllResults(this)}}r.d(t,"Fn",function(){return d});let d={Promise:l,Analytics:f,EventAnalytics:class extends f{setProgram(e){return this.program=e,this}get url(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}},AnalyticsResult:c,IdentifiableObject:class extends a{constructor(e){super(),this._filters=[],this.objectName=e}get name(){return this.objectName}where(e,t,r){return this._filters.push({right:e,operator:t,left:r}),this}get url(){var e=this._urlParameters;return this._filters.forEach(t=>{""!==e&&(e+="&"),e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),this.name+".json?"+e}},SQLViewData:class extends a{constructor(e){super(),this._id=e,this.parameters.var={}}setVariable(e,t){return this.parameters.var[e]=t||"",this}get url(){return"sqlViews/"+this._id+"/data.json?"+this._urlParameters}},Runner:n.a,Dependency:class{constructor(e,t){this.process=e,this.processCallback=t}},MultiFetcher:p,all:e=>new p(e),init:e=>{n.a.initiateRunner(e)}};"undefined"!=typeof window&&(window.Fn=d)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3Mvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy91dGlsaXRpZXMvcnVubmVyLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzcy1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvdXRpbGl0aWVzL3Byb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL3V0aWxpdGllcy9mZXRjaGVyLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy9yZXN1bHQvcm93LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy9yZXN1bHQvYW5hbHl0aWNzLXJlc3VsdC5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvbW9kZWwvYW5hbHl0aWNzLmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy91dGlsaXRpZXMvcHJvZ3Jlc3MtcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9mdW5jdGlvbi1hbmFseXRpY3MvLi9zcmMvdXRpbGl0aWVzL211bHRpLWZldGNoZXIuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy9tb2RlbC9ldmVudC1hbmFseXRpY3MuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL21vZGVsL2lkZW50aWZpYWJsZS1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZnVuY3Rpb24tYW5hbHl0aWNzLy4vc3JjL21vZGVsL3NxbC12aWV3LmpzIiwid2VicGFjazovL2Z1bmN0aW9uLWFuYWx5dGljcy8uL3NyYy91dGlsaXRpZXMvZGVwZW5kZW5jeS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImxlbmd0aCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsInByb2Nlc3MiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiUnVubmVyIiwicHJvZ3Jlc3NfcHJvbWlzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicHJvZ3Jlc3NfcHJvbWlzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJheGlvc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiYXhpb3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiYXhpb3NfbGliX2FkYXB0ZXJzX2h0dHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImF4aW9zX2xpYl9hZGFwdGVyc19odHRwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9pbnN0YW5jZSIsIltvYmplY3QgT2JqZWN0XSIsImNvbmZpZ3VyYXRpb25zIiwiaW5zdGFuY2UiLCJjb25maWciLCJjYWNoZSIsIl9mZXRjaCIsImZldGNoZXIiLCJyZXNvbHZlIiwicmVqZWN0IiwiRXJyb3IiLCJ1cmwiLCJiYXNlVXJsIiwibWV0aG9kIiwiYWRhcHRlciIsImh0dHBhZGFwdGVyIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGgiLCJheGlvcyIsInJlcXVlc3QiLCJ0aGVuIiwicmVzdWx0cyIsInBlcmZvcm1Qb3N0UHJvY2VzcyIsImRhdGEiLCJlcnIiLCJnZXRSZXN1bHRzIiwiX2ZldGNoZXJzIiwiZ2V0QWxsUmVzdWx0cyIsImhhc2hlZCIsImhhc2giLCJQcm9ncmVzc1Byb21pc2UiLCJwcm9ncmVzcyIsImhhc0RlcGVuZGVuY2llcyIsImdldERlcGVuZGVjeUZldGNoUmVzdWx0cyIsInBlcmZvcm1QcmVQcm9jZXNzIiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIiwibXVsdGlmZXRjaGVyIiwicHJvbWlzZXMiLCJmZXRjaGVycyIsIm1hcCIsImFsbCIsInV0aWxzIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJQcm9taXNlIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJYTUxIdHRwUmVxdWVzdCIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJBdXRob3JpemF0aW9uIiwib3BlbiIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VVUkwiLCJpbmRleE9mIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImUiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsIkxJU1RFTkVSUyIsImV4ZWN1dG9yIiwic3VwZXIiLCJsaXN0ZW5lciIsImVycm9yIiwiaGFuZGxlciIsInB1c2giLCJBcnJheSIsInJlc29sdmVDb3VudCIsImluZGV4IiwicHJvcG9ydGlvbiIsImlucHV0cyIsImludm9rZU5leHQiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJKU09OIiwic3RyaW5naWZ5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZW5oYW5jZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwic3ByZWFkIiwiZGVmYXVsdCIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsInRvSVNPU3RyaW5nIiwiam9pbiIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwib3JpZ2luVVJMIiwibXNpZSIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwiY2hhcnMiLCJFIiwiaW5wdXQiLCJibG9jayIsImNoYXJDb2RlIiwiU3RyaW5nIiwib3V0cHV0IiwiaWR4IiwiY2hhckNvZGVBdCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJpZCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwicmVhc29uIiwiZm5zIiwicmVsYXRpdmVVUkwiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwic291cmNlIiwiY2FsbGJhY2siLCJhcnIiLCJQcm9jZXNzIiwicG9zdFByb2Nlc3NvcnMiLCJkZXBlbmRlbmNpZXMiLCJwcmVQcm9jZXNzIiwiZGVwZW5kZW5jeSIsImFkZFByZVByb2Nlc3MiLCJwb3N0UHJvY2VzcyIsImFkZFBvc3RQcm9jZXNzIiwicHJvY2Vzc0NhbGxiYWNrIiwiX3Jlc3VsdHMiLCJkYXRhVG9Qcm9jZXNzIiwiRmV0Y2hlciIsInBhcmFtZXRlcnMiLCJfdXJsUGFyYW1ldGVycyIsImtleXMiLCJrZXkyIiwic2V0UGFyYW1ldGVycyIsIl9lbmNvZGU2NCIsImJ1ZmYiLCJVaW50OEFycmF5IiwicmVkdWNlIiwiZnJvbUNoYXJDb2RlIiwiUm93Iiwicm93IiwibWV0YURhdGEiLCJkaW1lbnNpb24iLCJoZWFkZXIiLCJuYW1lcyIsIml0ZW1zIiwib3VIaWVyYXJjaHkiLCJkeCIsInBlIiwib3UiLCJBbmFseXRpY3NSZXN1bHQiLCJhbmFseXRpY3NPYmplY3QiLCJfZGF0YSIsInJvd3MiLCJoZWlnaHQiLCJ3aWR0aCIsIkFuYWx5dGljcyIsInN0YW5kYXJkaXplQW5hbHl0aWNzIiwic2V0RGF0YSIsInNldERpbWVuc2lvbiIsInNldFBlcmlvZCIsInNldE9yZ1VuaXQiLCJkaW0iLCJjb3VudCIsInNhbml0aXplZEFuYWx5dGljc09iamVjdCIsImRpbWVuc2lvbnMiLCJjbyIsIm5ld0hlYWRlciIsIndhcm4iLCJzYW5pdGl6ZWRNZXRhZGF0YSIsImdldFNhbml0aXplZEFuYWx5dGljc01ldGFkYXRhIiwiYW5hbHl0aWNNZXRhZGF0YSIsIm5hbWVLZXkiLCJNdWx0aUZldGNoZXIiLCJGbiIsIkV2ZW50QW5hbHl0aWNzIiwic2V0UHJvZ3JhbSIsInByb2dyYW0iLCJJZGVudGlmaWFibGVPYmplY3QiLCJvYmplY3ROYW1lIiwiX2ZpbHRlcnMiLCJ3aGVyZSIsInJpZ2h0Iiwib3BlcmF0b3IiLCJsZWZ0IiwiZmlsdGVyIiwiU1FMVmlld0RhdGEiLCJfaWQiLCJzZXRWYXJpYWJsZSIsInZhcmlhYmxlIiwiRGVwZW5kZW5jeSIsImluaXQiLCJpbml0aWF0ZVJ1bm5lciJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsZUFBQUMsSUFDQUQsT0FBQSx3QkFBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxzQkFBQUQsSUFFQUQsRUFBQSxzQkFBQUMsSUFSQSxDQVNDLG9CQUFBSyxVQUFBQyxLQUFBLFdBQ0QsbUJDVEEsSUFBQUMsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBUixRQUdBLElBQUFDLEVBQUFLLEVBQUFFLEdBQUEsQ0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBVixRQUFBLElBVUEsT0FOQVcsRUFBQUgsR0FBQUksS0FBQVgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQU8sR0FHQU4sRUFBQVMsR0FBQSxFQUdBVCxFQUFBRCxRQTBEQSxPQXJEQU8sRUFBQU0sRUFBQUYsRUFHQUosRUFBQU8sRUFBQVIsRUFHQUMsRUFBQVEsRUFBQSxTQUFBZixFQUFBZ0IsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWxCLEVBQUFnQixJQUNBRyxPQUFBQyxlQUFBcEIsRUFBQWdCLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNWLEVBQUFnQixFQUFBLFNBQUF2QixHQUNBLG9CQUFBd0IsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQXBCLEVBQUF3QixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBcEIsRUFBQSxjQUFpRDBCLE9BQUEsS0FRakRuQixFQUFBb0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFB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QU9pVyxlQUFldFYsS0FJSixvQkFBWDFCLFNBQ1RBLE9BQU84VixHQUFLQSIsImZpbGUiOiJmdW5jdGlvbi1hbmFseXRpY3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJmdW5jdGlvbi1hbmFseXRpY3NcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZnVuY3Rpb24tYW5hbHl0aWNzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImZ1bmN0aW9uLWFuYWx5dGljc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsImltcG9ydCBQcm9ncmVzc1Byb21pc2UgZnJvbSAncHJvZ3Jlc3MtcHJvbWlzZSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGh0dHBhZGFwdGVyIGZyb20gJ2F4aW9zL2xpYi9hZGFwdGVycy9odHRwJztcbmltcG9ydCB4aHJhZGFwdGVyIGZyb20gJ2F4aW9zL2xpYi9hZGFwdGVycy94aHInO1xubGV0IF9pbnN0YW5jZTtcblxuLyoqXG4gKiBSdW5uZXIgcmVwcmVzZW50cyB0aGUgcHJvY2VzcyB3aGljaCB3aWxsIHNjaGVkdWxlIGFuZCBydW4gb3BlcmF0aW9ucyBvZiB0aGUgcHJvY2Vzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5uZXIge1xuICAvKipcbiAgICogSW5pdGlhdGVzIHRoZSBydW5uZXIgc2luZ2xldG9uIGluc3RhbmNlXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uc1xuICAgKi9cbiAgc3RhdGljIGluaXRpYXRlUnVubmVyKGNvbmZpZ3VyYXRpb25zKSB7XG4gICAgaWYgKCFSdW5uZXIuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlndXJhdGlvbnM7XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgICBfaW5zdGFuY2UgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFJ1bm5lciBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7UnVubmVyfVxuICAgKi9cbiAgZ2V0IGluc3RhbmNlKCkge1xuICAgIHJldHVybiBfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uc1xuICAgKi9cbiAgc2V0IGNvbmZpZyhjb25maWd1cmF0aW9ucykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlndXJhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb25maWd1cmF0aW9uc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FsbGJhY2sgdHlwZSBpcyBjYWxsZWQgYHJlc29sdmVDYWxsYmFja2AuXG4gICAqXG4gICAqIEBjYWxsYmFjayByZXNvbHZlQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlUmVzdWx0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGlzIGNhbGxiYWNrIHR5cGUgaXMgY2FsbGVkIGByZWplY3RDYWxsYmFja2AuXG4gICAqXG4gICAqIEBjYWxsYmFjayByZWplY3RDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgZGF0YSBmcm9tIHRoZSBmZXRjaGVyXG4gICAqIEBwYXJhbSB7RmV0Y2hlcn0gZmV0Y2hlclxuICAgKiBAcGFyYW0ge3Jlc29sdmVDYWxsYmFja30gcmVzb2x2ZVxuICAgKiBAcGFyYW0ge3JlamVjdENhbGxiYWNrfSByZWplY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9mZXRjaChmZXRjaGVyLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIV9pbnN0YW5jZSkge1xuICAgICAgbGV0IGVycm9yID0gJ0NvbmZpZ3JhdGlvbiBub3Qgc2V0IHBsZWFzZSBjb25maWdyZSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ2FuYWx5dGljcyBlZyB7YmFzZVVybDpcImRoaXNfYmFzZV91cmxcIiwgdXNlcm5hbWU6XCJ1c2VybmFtZVwiLCAnICtcbiAgICAgICAgJ3Bhc3N3b3JkOlwicGFzc3dvcmRcIn0nO1xuXG4gICAgICB0aHJvdyBFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIHVybDogX2luc3RhbmNlLmNvbmZpZy5iYXNlVXJsICsgZmV0Y2hlci51cmwsXG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgYWRhcHRlcjogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gaHR0cGFkYXB0ZXIgOiB4aHJhZGFwdGVyXG4gICAgfTtcblxuICAgIGlmIChfaW5zdGFuY2UuY29uZmlnLnVzZXJuYW1lICYmIF9pbnN0YW5jZS5jb25maWcucGFzc3dvcmQpIHtcbiAgICAgIGNvbmZpZy5hdXRoID0ge1xuICAgICAgICB1c2VybmFtZTogX2luc3RhbmNlLmNvbmZpZy51c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IF9pbnN0YW5jZS5jb25maWcucGFzc3dvcmRcbiAgICAgIH07XG4gICAgfVxuICAgIGF4aW9zLnJlcXVlc3QoY29uZmlnKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICByZXNvbHZlKGZldGNoZXIucGVyZm9ybVBvc3RQcm9jZXNzKHJlc3VsdHMuZGF0YSkpO1xuICAgIH0sIChlcnIpID0+IHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgZGF0YSByZWxhdGVkIHRvIGEgZmV0Y2hlclxuICAgKiBAcGFyYW0ge0ZldGNoZXJ9IGZldGNoZXJcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX1cbiAgICovXG4gIGdldFJlc3VsdHMoZmV0Y2hlcikge1xuICAgIGlmIChmZXRjaGVyLl9mZXRjaGVycykgeyAvLyBJZiBpcyBhIG11bHRpZmV0Y2hlclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsUmVzdWx0cyhmZXRjaGVyKTtcbiAgICB9XG4gICAgbGV0IGhhc2hlZCA9IGZldGNoZXIuaGFzaCgpO1xuXG4gICAgaWYgKCFfaW5zdGFuY2UuY2FjaGVbaGFzaGVkXSkge1xuICAgICAgX2luc3RhbmNlLmNhY2hlW2hhc2hlZF0gPSBuZXcgUHJvZ3Jlc3NQcm9taXNlKFxuICAgICAgICAocmVzb2x2ZSwgcmVqZWN0LCBwcm9ncmVzcykgPT4ge1xuICAgICAgICAgIGlmIChmZXRjaGVyLmhhc0RlcGVuZGVuY2llcygpKSB7XG4gICAgICAgICAgICBmZXRjaGVyXG4gICAgICAgICAgICAgIC5nZXREZXBlbmRlY3lGZXRjaFJlc3VsdHMoKVxuICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZmV0Y2hlci5wZXJmb3JtUHJlUHJvY2VzcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZldGNoKGZldGNoZXIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJycnJycnJycnI6JywgZXJyKTtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZldGNoKGZldGNoZXIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gX2luc3RhbmNlLmNhY2hlW2hhc2hlZF07XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBkYXRhIGZvciBtdWx0aXBsZSBmZXRjaGVyc1xuICAgKiBAcGFyYW0ge011bHRpRmV0Y2hlcn0gbXVsdGlmZXRjaGVyXG4gICAqIEByZXR1cm5zIHtQcm9ncmVzc1Byb21pc2V9XG4gICAqL1xuICBnZXRBbGxSZXN1bHRzKG11bHRpZmV0Y2hlcikge1xuICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NQcm9taXNlKChyZXNvbHZlLCByZWplY3QsIHByb2dyZXNzKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlcyA9IG11bHRpZmV0Y2hlci5mZXRjaGVycy5tYXAoKGZldGNoZXIpID0+IChuZXcgUnVubmVyKCkpLmdldFJlc3VsdHMoZmV0Y2hlcikpO1xuXG4gICAgICByZXR1cm4gUHJvZ3Jlc3NQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICByZXNvbHZlKG11bHRpZmV0Y2hlci5wZXJmb3JtUG9zdFByb2Nlc3MocmVzdWx0cykpO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZhbGxiYWNrIGZvciBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBTeW1ib2xcbmNvbnN0IExJU1RFTkVSUyA9IFN5bWJvbCA/IFN5bWJvbCgpIDogJ19fbGlzdGVuZXJzJztcblxuY2xhc3MgUHJvZ3Jlc3NQcm9taXNlIGV4dGVuZHMgUHJvbWlzZSB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgc3VwZXIoKHJlc29sdmUsIHJlamVjdCkgPT4gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0LFxuICAgICAgLy8gUGFzcyBtZXRob2QgZm9yIHBhc3NpbmcgcHJvZ3Jlc3MgdG8gbGlzdGVuZXJcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tMSVNURU5FUlNdLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIodmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB0aGlzW0xJU1RFTkVSU10gPSBbXTtcbiAgfVxuICBwcm9ncmVzcyhoYW5kbGVyKSB7XG4gICAgaWYodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BST0dSRVNTX1JFUVVJUkVTX0ZVTkNUSU9OJyk7XG4gICAgdGhpc1tMSVNURU5FUlNdLnB1c2goaGFuZGxlcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc3RhdGljIGFsbChwcm9taXNlcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkocHJvbWlzZXMubGVuZ3RoKTtcbiAgICBjb25zdCBsZW5ndGggPSBwcm9taXNlcy5sZW5ndGg7XG4gICAgbGV0IHJlc29sdmVDb3VudCA9IDA7XG4gICAgcmV0dXJuIG5ldyBQcm9ncmVzc1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIHByb21pc2VzLmZvckVhY2goKHByb21pc2UsIGluZGV4KSA9PiB7XG4gICAgICAgIHByb21pc2UudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0O1xuICAgICAgICAgIHJlc3VsdHMucHJvcG9ydGlvbiA9ICsrcmVzb2x2ZUNvdW50IC8gbGVuZ3RoO1xuICAgICAgICAgIHByb2dyZXNzKHJlc3VsdHMpO1xuICAgICAgICAgIGlmKHJlc29sdmVDb3VudCA9PT0gbGVuZ3RoKSByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHNlcXVlbmNlKGlucHV0cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBjb25zdCBsZW5ndGggPSBpbnB1dHMubGVuZ3RoO1xuICAgIGxldCByZXNvbHZlQ291bnQgPSAwO1xuICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NQcm9taXNlKChyZXNvbHZlLCByZWplY3QsIHByb2dyZXNzKSA9PiB7XG4gICAgICBmdW5jdGlvbiBpbnZva2VOZXh0KCkge1xuICAgICAgICBoYW5kbGVyLmNhbGwobnVsbCwgaW5wdXRzW3Jlc3VsdHMubGVuZ3RoXSlcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICByZXN1bHRzLnByb3BvcnRpb24gPSArK3Jlc29sdmVDb3VudCAvIGxlbmd0aDtcbiAgICAgICAgICAgIHByb2dyZXNzKHJlc3VsdHMpO1xuICAgICAgICAgICAgaWYocmVzdWx0cy5sZW5ndGggPT09IGxlbmd0aCkgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgIGVsc2UgaW52b2tlTmV4dCgpO1xuICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7O1xuICAgICAgfVxuICAgICAgaW52b2tlTmV4dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvZ3Jlc3NQcm9taXNlO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcm9jZXNzb3JcbiAqL1xuZXhwb3J0IGNsYXNzIFByb2Nlc3Mge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb2Nlc3NvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wb3N0UHJvY2Vzc29ycyA9IFtdO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHByb2Nlc3NvciBoYXMgZGVwZW5kZW5jaWVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzRGVwZW5kZW5jaWVzKCkge1xuICAgIHJldHVybiB0aGlzLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZGVwZW5kZW5jeSB0byB0aGUgcHJvY2Vzc29yXG4gICAqIEBwYXJhbSB7RGVwZW5kZW5jeX0gZGVwZW5kZW5jeVxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYWRkUHJlUHJvY2Vzc1xuICAgKiBAcmV0dXJucyB7UHJvY2Vzc31cbiAgICovXG4gIHByZVByb2Nlc3MoZGVwZW5kZW5jeSkge1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzLnB1c2goZGVwZW5kZW5jeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBkZXBlbmRlbmN5IHRvIHRoZSBwcm9jZXNzb3JcbiAgICogQHBhcmFtIHtEZXBlbmRlbmN5fSBkZXBlbmRlbmN5XG4gICAqIEByZXR1cm5zIHtQcm9jZXNzfVxuICAgKi9cbiAgYWRkUHJlUHJvY2VzcyhkZXBlbmRlbmN5KSB7XG4gICAgdGhpcy5kZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNhbGxiYWNrIHByb2Nlc3MgdGhlIG91dHB1dCBwcm9jZXNzXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgYWRkUG9zdFByb2Nlc3NcbiAgICogQHJldHVybnMge1Byb2Nlc3N9XG4gICAqL1xuICBwb3N0UHJvY2VzcyhjYWxsYmFjaykge1xuICAgIHRoaXMucG9zdFByb2Nlc3NvcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBjYWxsYmFjayBwcm9jZXNzIHRoZSBvdXRwdXQgcHJvY2Vzc1xuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb2Nlc3N9XG4gICAqL1xuICBhZGRQb3N0UHJvY2VzcyhjYWxsYmFjaykge1xuICAgIHRoaXMucG9zdFByb2Nlc3NvcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgcHJlIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Byb2Nlc3N9XG4gICAqL1xuICBwZXJmb3JtUHJlUHJvY2VzcygpIHtcbiAgICB0aGlzLmRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcGVuZGVuY3kgPT4ge1xuICAgICAgZGVwZW5kZW5jeS5wcm9jZXNzQ2FsbGJhY2soZGVwZW5kZW5jeS5wcm9jZXNzLl9yZXN1bHRzLCB0aGlzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBwb3N0IHByb2Nlc3MgYWZ0ZXIgdGhlIHByb2Nlc3MgaGFzIGVuZGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBwZXJmb3JtUG9zdFByb2Nlc3MoZGF0YSkge1xuICAgIHRoaXMuX3Jlc3VsdHMgPSBkYXRhO1xuICAgIGxldCBkYXRhVG9Qcm9jZXNzID0gZGF0YTtcblxuICAgIHRoaXMucG9zdFByb2Nlc3NvcnMuZm9yRWFjaChjYWxsYmFjayA9PiB7XG4gICAgICBkYXRhVG9Qcm9jZXNzID0gY2FsbGJhY2soZGF0YVRvUHJvY2Vzcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFUb1Byb2Nlc3M7XG4gIH1cbn1cbiIsImltcG9ydCB7IFJ1bm5lciB9IGZyb20gJy4vcnVubmVyJztcbmltcG9ydCB7IFByb2Nlc3MgfSBmcm9tICcuL3Byb2Nlc3MnO1xuaW1wb3J0IFByb2dyZXNzUHJvbWlzZSBmcm9tICdwcm9ncmVzcy1wcm9taXNlJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBmZXRjaGVyIHByb2Nlc3NcbiAqQGV4dGVuZHMgUHJvY2Vzc1xuICovXG5leHBvcnQgY2xhc3MgRmV0Y2hlciBleHRlbmRzIFByb2Nlc3Mge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGZldGhjZXJcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIFVSTCBQYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXQgX3VybFBhcmFtZXRlcnMoKSB7XG4gICAgbGV0IHVybCA9ICcnO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5wYXJhbWV0ZXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAodXJsICE9PSAnJykge1xuICAgICAgICB1cmwgKz0gJyYnO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnBhcmFtZXRlcnNba2V5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXJsICs9IGtleSArICc9JyArIHRoaXMucGFyYW1ldGVyc1trZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wYXJhbWV0ZXJzW2tleV0pLmZvckVhY2goa2V5MiA9PiB7XG4gICAgICAgICAgaWYgKHVybCAhPT0gJycpIHtcbiAgICAgICAgICAgIHVybCArPSAnJic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnNba2V5XVtrZXkyXSA9PT0gJycpIHtcbiAgICAgICAgICAgIHVybCArPSBrZXkgKyAnPScgKyBrZXkyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgKz0ga2V5ICsgJz0nICsga2V5MiArICc6JyArIHRoaXMucGFyYW1ldGVyc1trZXldW2tleTJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1cmxcbiAgICogQHRocm93cyBJbXBsZW1lbnRhdGlvbiBFcnJvclxuICAgKi9cbiAgZ2V0IHVybCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBpbXBsZW1lbnQgdXJsIGdlbmVyYXRpb24nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBydW5uaW5nIHByb2Nlc3Mgc3RhcnRlZFxuICAgKiBAcmV0dXJucyB7UHJvZ3Jlc3NQcm9taXNlfVxuICAgKi9cbiAgZ2V0KCkge1xuICAgIHJldHVybiBuZXcgUnVubmVyKCkuZ2V0UmVzdWx0cyh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcGFyZW1ldGVyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyB7RmV0Y2hlcn1cbiAgICovXG4gIHNldFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHRoaXMucGFyYW1ldGVyc1trZXldID0gcGFyYW1ldGVyc1trZXldO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBEZXBlbmRlbmN5IHJlc3VsdHNcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX1cbiAgICovXG4gIGdldERlcGVuZGVjeUZldGNoUmVzdWx0cygpIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuZGVwZW5kZW5jaWVzLm1hcChkZXBlbmRlbmN5ID0+IHtcbiAgICAgIHJldHVybiBuZXcgUnVubmVyKCkuZ2V0UmVzdWx0cyhkZXBlbmRlbmN5LnByb2Nlc3MpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFByb2dyZXNzUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIF9lbmNvZGU2NChidWZmKSB7XG4gICAgcmV0dXJuIGJ0b2EobmV3IFVpbnQ4QXJyYXkoYnVmZikucmVkdWNlKChzLCBiKSA9PiBzICsgU3RyaW5nLmZyb21DaGFyQ29kZShiKSwgJycpKTtcbiAgfVxuICBoYXNoKCkge1xuICAgIHJldHVybiB0aGlzLnVybDtcbiAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgdGhlIEFuYWx5dGljcyBSZXN1bHRzXG4gKlxuICovXG5leHBvcnQgY2xhc3MgUm93IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5hIEFuYWx5dGljcyBPYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IC0gREhJUyBBbmFseXRpY3Mgb2JqZWN0XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihyb3csIGhlYWRlcnMsIG1ldGFEYXRhKSB7XG4gICAgdGhpcy5yb3cgPSByb3c7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLm1ldGFEYXRhID0gbWV0YURhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgQW5hbHl0aWNzIEhlYWRlcnMgQXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSAtIERISVMgQW5hbHl0aWNzIGhlYWRlcnNcbiAgICovXG4gIGRpbWVuc2lvbihpZCkge1xuICAgIHZhciBpID0gLTEsIG5hbWUgPSAnJztcblxuICAgIHRoaXMuaGVhZGVycy5mb3JFYWNoKChoZWFkZXIsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaGVhZGVyLm5hbWUgPT09IGlkKSB7XG4gICAgICAgIGkgPSBpbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGhpcy5tZXRhRGF0YS5uYW1lcykge1xuICAgICAgbmFtZSA9IHRoaXMubWV0YURhdGEubmFtZXNbdGhpcy5yb3dbaV1dO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tZXRhRGF0YS5pdGVtcykge1xuICAgICAgbmFtZSA9IHRoaXMubWV0YURhdGEuaXRlbXNbdGhpcy5yb3dbaV1dID8gdGhpcy5tZXRhRGF0YS5pdGVtc1t0aGlzLnJvd1tpXV0ubmFtZSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0aGlzLnJvd1tpXSxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBwYXRoOlxuICAgICAgICB0aGlzLm1ldGFEYXRhLm91SGllcmFyY2h5ICYmXG4gICAgICAgIHRoaXMubWV0YURhdGEub3VIaWVyYXJjaHlbdGhpcy5yb3dbaV1dICE9PSB1bmRlZmluZWQgPyB0aGlzLm1ldGFEYXRhLm91SGllcmFyY2h5W3RoaXMucm93W2ldXSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcm93cyBvZiB0aGUgYW5hbHl0aWNzIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBnZXQgZHgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uKCdkeCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJvd3Mgb2YgdGhlIGFuYWx5dGljcyBvYmplY3RcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgZ2V0IHBlKCkge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbigncGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSByb3dzIG9mIHRoZSBhbmFseXRpY3Mgb2JqZWN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIGdldCBvdSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaW1lbnNpb24oJ291Jyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcm93cyBvZiB0aGUgYW5hbHl0aWNzIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uKCd2YWx1ZScpLmlkO1xuICB9XG59XG4iLCJpbXBvcnQge1Jvd30gZnJvbSAnLi9yb3cnO1xuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyB0aGUgQW5hbHl0aWNzIFJlc3VsdHNcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmFseXRpY3NSZXN1bHQge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbmEgQW5hbHl0aWNzIE9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gLSBESElTIEFuYWx5dGljcyBvYmplY3RcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFuYWx5dGljc09iamVjdCkge1xuICAgIHRoaXMuX2RhdGEgPSBhbmFseXRpY3NPYmplY3Q7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgQW5hbHl0aWNzIEhlYWRlcnMgQXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSAtIERISVMgQW5hbHl0aWNzIGhlYWRlcnNcbiAgICovXG4gIGdldCBoZWFkZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmhlYWRlcnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgQW5hbHl0aWNzIE1ldGFkYXRhIE9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyB7KnxtZXRhRGF0YXx7ZGltZW5zaW9ucywgbmFtZXMsIGR4LCBwZSwgb3UsIGNvfXx7b3VIaWVyYXJjaHksIGl0ZW1zLCBkaW1lbnNpb25zfX1cbiAgICovXG4gIGdldCBtZXRhRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5tZXRhRGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSByb3dzIG9mIHRoZSBhbmFseXRpY3Mgb2JqZWN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIGdldCByb3dzKCkge1xuICAgIGxldCByb3dzID0gW107XG5cbiAgICB0aGlzLl9kYXRhLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICByb3dzLnB1c2gobmV3IFJvdyhyb3csIHRoaXMuaGVhZGVycywgdGhpcy5tZXRhRGF0YSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEFuYWx5dGljcyBoZWlnaHRcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEFuYWx5dGljcyB3aWR0aFxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLndpZHRoO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGZXRjaGVyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2ZldGNoZXInO1xuaW1wb3J0IHsgQW5hbHl0aWNzUmVzdWx0IH0gZnJvbSAnLi4vcmVzdWx0L2FuYWx5dGljcy1yZXN1bHQnO1xuLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgdGhlIEFuYWx5dGljcyBGZXRjaGVyIGZvciBwcm9jZXNzaW5nIGFuYWx5dGljcyBjYWxsc1xuICpcbiAqIEBleHRlbmRzIEZldGNoZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5dGljcyBleHRlbmRzIEZldGNoZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhbmFseXRpY3MgZmV0aGNlclxuICAgKlxuICAgKiBAcGFyYW0gdmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIGRoaXMgYW5hbHl0aWNzIHN0cnVjdHVyZSB0byB1c2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZlcnNpb24gPSAyNSkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIHZlcnNpb24gPSAyNTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlcnNpb24gPSAyNjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wYXJhbWV0ZXJzWydkaW1lbnNpb24nXSA9IHt9O1xuICAgIHRoaXMucG9zdFByb2Nlc3MoZGF0YSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFuZGFyZGl6ZUFuYWx5dGljcyhkYXRhLCB2ZXJzaW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkYXRhIGZvciB0aGUgZmV0Y2hcbiAgICogQHBhcmFtIGR4XG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3N9XG4gICAqL1xuICBzZXREYXRhKGR4KSB7XG4gICAgdGhpcy5zZXREaW1lbnNpb24oJ2R4JywgZHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBlcmlvZCBmb3IgdGhlIGZldGNoXG4gICAqIEBwYXJhbSBwZVxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzfVxuICAgKi9cbiAgc2V0UGVyaW9kKHBlKSB7XG4gICAgdGhpcy5zZXREaW1lbnNpb24oJ3BlJywgcGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG9yZ2FuaXNhdGlvbiB1bml0IGZvciB0aGUgZmV0Y2hpbmcgb2YgdGhlIGFuYWx5dGljc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3UgLSBPcmdhbmlzYXRpb24gdW5pdFxuICAgKiBAcmV0dXJucyB7QW5hbHl0aWNzfSBBbmFseXRpY3MgcmVzdWx0c1xuICAgKi9cbiAgc2V0T3JnVW5pdChvdSkge1xuICAgIHRoaXMuc2V0RGltZW5zaW9uKCdvdScsIG91KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaW1lbnNpb24gZm9yIHRoZSBmZXRjaGluZyBvZiB0aGUgYW5hbHl0aWNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaW0gLSBEeW5hbWljIERpbWVuc2lvbiBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIER5bmFtaWMgZGltZW5zaW9uIG9wdGlvbnMgaWRlbnRpZmllcnNcbiAgICogQHJldHVybnMge0FuYWx5dGljc31cbiAgICovXG4gIHNldERpbWVuc2lvbihkaW0sIHZhbHVlKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJzWydkaW1lbnNpb24nXVtkaW1dID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YW5kYXJkaXplcyB0aGUgYW5hbHl0aWNzIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0gYW5hbHl0aWNzT2JqZWN0IC0gVGhlIGFuYWx5dGljcyBvYmplY3RcbiAgICogQHBhcmFtIHZlcnNpb24gLSBUaGUgdmVyc2lvbiBvZiBkaGlzIGFuYWx5dGljcyBzdHJ1Y3R1cmUgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3NSZXN1bHR9XG4gICAqL1xuICBzdGFuZGFyZGl6ZUFuYWx5dGljcyhhbmFseXRpY3NPYmplY3QsIHZlcnNpb24gPSAyNSkge1xuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gMjU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZXJzaW9uID0gMjY7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIFNlcnZlcnNpZGUgRXZlbnQgY2x1c3RlcmluZyBkbyBub3RoaW5nXG4gICAgaWYgKGFuYWx5dGljc09iamVjdC5jb3VudCkge1xuICAgICAgcmV0dXJuIGFuYWx5dGljc09iamVjdDtcbiAgICB9XG4gICAgbGV0IHNhbml0aXplZEFuYWx5dGljc09iamVjdCA9IHtcbiAgICAgIGhlYWRlcnM6IFtdLFxuICAgICAgbWV0YURhdGE6IHtcbiAgICAgICAgZGltZW5zaW9uczoge30sXG4gICAgICAgIG5hbWVzOiB7fSxcbiAgICAgICAgZHg6IFtdLFxuICAgICAgICBwZTogW10sXG4gICAgICAgIG91OiBbXSxcbiAgICAgICAgY286IFtdXG4gICAgICB9LFxuICAgICAgcm93czogW11cbiAgICB9O1xuXG4gICAgaWYgKGFuYWx5dGljc09iamVjdCkge1xuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBoZWFkZXJzXG4gICAgICAgKi9cbiAgICAgIGlmIChhbmFseXRpY3NPYmplY3QuaGVhZGVycykge1xuICAgICAgICBhbmFseXRpY3NPYmplY3QuaGVhZGVycy5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBuZXdIZWFkZXIgPSBoZWFkZXI7XG5cbiAgICAgICAgICAgIHNhbml0aXplZEFuYWx5dGljc09iamVjdC5oZWFkZXJzLnB1c2gobmV3SGVhZGVyKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgaGVhZGVyIG9iamVjdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgbWV0YURhdGFcbiAgICAgICAqL1xuICAgICAgaWYgKGFuYWx5dGljc09iamVjdC5tZXRhRGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBzYW5pdGl6ZWRNZXRhZGF0YSA9IHRoaXMuZ2V0U2FuaXRpemVkQW5hbHl0aWNzTWV0YWRhdGEoXG4gICAgICAgICAgICBhbmFseXRpY3NPYmplY3QubWV0YURhdGEsXG4gICAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHNhbml0aXplZEFuYWx5dGljc09iamVjdC5tZXRhRGF0YSA9IHNhbml0aXplZE1ldGFkYXRhO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIG1ldGFkYXRhIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgcm93c1xuICAgICAgICovXG4gICAgICBpZiAoYW5hbHl0aWNzT2JqZWN0LnJvd3MpIHtcbiAgICAgICAgc2FuaXRpemVkQW5hbHl0aWNzT2JqZWN0LnJvd3MgPSBhbmFseXRpY3NPYmplY3Qucm93cztcbiAgICAgIH1cbiAgICB9XG4gICAgc2FuaXRpemVkQW5hbHl0aWNzT2JqZWN0LmhlaWdodCA9IGFuYWx5dGljc09iamVjdC5oZWlnaHQ7XG4gICAgc2FuaXRpemVkQW5hbHl0aWNzT2JqZWN0LndpZHRoID0gYW5hbHl0aWNzT2JqZWN0LndpZHRoO1xuICAgIHJldHVybiBuZXcgQW5hbHl0aWNzUmVzdWx0KHNhbml0aXplZEFuYWx5dGljc09iamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhbmRhcmRpemVzIHRoZSBhbmFseXRpY3MgbWV0YWRhdGEgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSBhbmFseXRpY01ldGFkYXRhIC0gVGhlIGFuYWx5dGljcyBtZXRhZGF0YSBvYmplY3RcbiAgICogQHBhcmFtIHZlcnNpb24gLSBUaGUgdmVyc2lvbiBvZiBkaGlzIGFuYWx5dGljcyBzdHJ1Y3R1cmUgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRTYW5pdGl6ZWRBbmFseXRpY3NNZXRhZGF0YShhbmFseXRpY01ldGFkYXRhLCB2ZXJzaW9uKSB7XG4gICAgbGV0IHNhbml0aXplZE1ldGFkYXRhID0ge307XG5cbiAgICBpZiAoYW5hbHl0aWNNZXRhZGF0YSkge1xuICAgICAgaWYgKGFuYWx5dGljTWV0YWRhdGEub3VIaWVyYXJjaHkpIHtcbiAgICAgICAgc2FuaXRpemVkTWV0YWRhdGEub3VIaWVyYXJjaHkgPSBhbmFseXRpY01ldGFkYXRhLm91SGllcmFyY2h5O1xuICAgICAgfVxuICAgICAgaWYgKHZlcnNpb24gPCAyNikge1xuICAgICAgICAvLyBHZXQgb2xkIHN0cnVjdHVyZVxuICAgICAgICBzYW5pdGl6ZWRNZXRhZGF0YS5uYW1lcyA9IHt9O1xuICAgICAgICBpZiAoYW5hbHl0aWNNZXRhZGF0YS5uYW1lcykge1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLm5hbWVzID0gYW5hbHl0aWNNZXRhZGF0YS5uYW1lcztcbiAgICAgICAgfSBlbHNlIGlmIChhbmFseXRpY01ldGFkYXRhLml0ZW1zKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoYW5hbHl0aWNNZXRhZGF0YS5pdGVtcykuZm9yRWFjaChuYW1lS2V5ID0+IHtcbiAgICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLm5hbWVzW25hbWVLZXldID1cbiAgICAgICAgICAgICAgYW5hbHl0aWNNZXRhZGF0YS5pdGVtc1tuYW1lS2V5XS5uYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuYWx5dGljTWV0YWRhdGEuZGltZW5zaW9ucykge1xuICAgICAgICAgIE9iamVjdC5rZXlzKGFuYWx5dGljTWV0YWRhdGEuZGltZW5zaW9ucykuZm9yRWFjaChuYW1lS2V5ID0+IHtcbiAgICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhW25hbWVLZXldID0gYW5hbHl0aWNNZXRhZGF0YS5kaW1lbnNpb25zW25hbWVLZXldO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBHZXQgbmV3IHN0cnVjdHVyZVxuICAgICAgICBzYW5pdGl6ZWRNZXRhZGF0YS5pdGVtcyA9IHt9O1xuICAgICAgICBpZiAoYW5hbHl0aWNNZXRhZGF0YS5pdGVtcykge1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLml0ZW1zID0gYW5hbHl0aWNNZXRhZGF0YS5pdGVtcztcbiAgICAgICAgfSBlbHNlIGlmIChhbmFseXRpY01ldGFkYXRhLm5hbWVzKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoYW5hbHl0aWNNZXRhZGF0YS5pdGVtcykuZm9yRWFjaChuYW1lS2V5ID0+IHtcbiAgICAgICAgICAgIGFuYWx5dGljTWV0YWRhdGEuaXRlbXNbbmFtZUtleV0gPSB7XG4gICAgICAgICAgICAgIG5hbWU6IGFuYWx5dGljTWV0YWRhdGEubmFtZXNbbmFtZUtleV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFuYWx5dGljTWV0YWRhdGEuZGltZW5zaW9ucykge1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmRpbWVuc2lvbnMgPSB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhhbmFseXRpY01ldGFkYXRhKS5mb3JFYWNoKG5hbWVLZXkgPT4ge1xuICAgICAgICAgICAgaWYgKFsnbmFtZXMnLCAnaXRlbXMnLCAnZGltZW5zaW9ucyddLmluZGV4T2YobmFtZUtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmRpbWVuc2lvbnNbbmFtZUtleV0gPSBhbmFseXRpY01ldGFkYXRhW25hbWVLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNhbml0aXplZE1ldGFkYXRhLmRpbWVuc2lvbnMgPSBhbmFseXRpY01ldGFkYXRhLmRpbWVuc2lvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNhbml0aXplZE1ldGFkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVybCBmb3IgZmV0Y2hpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCB1cmwoKSB7XG4gICAgcmV0dXJuICdhbmFseXRpY3M/JyArIHRoaXMuX3VybFBhcmFtZXRlcnM7XG4gIH1cbn1cbiIsIi8vIEZhbGxiYWNrIGZvciBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBTeW1ib2xcbmNvbnN0IExJU1RFTkVSUyA9IFN5bWJvbCA/IFN5bWJvbCgpIDogJ19fbGlzdGVuZXJzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIFByb2dyZXNzIFByb21pc2VcbiAqIEBleHRlbmRzIFByb21pc2VcbiAqL1xuZXhwb3J0IGNsYXNzIFByb2dyZXNzUHJvbWlzZSBleHRlbmRzIFByb21pc2Uge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIHN1cGVyKChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBleGVjdXRvcihcbiAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0LFxuICAgICAgICAvLyBQYXNzIG1ldGhvZCBmb3IgcGFzc2luZyBwcm9ncmVzcyB0byBsaXN0ZW5lclxuICAgICAgICB2YWx1ZSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW0xJU1RFTkVSU10uZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcih2YWx1ZSkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgICB0aGlzW0xJU1RFTkVSU10gPSBbXTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtjYWxsYmFja30gaGFuZGxlclxuICAgKi9cbiAgcHJvZ3Jlc3MoaGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQUk9HUkVTU19SRVFVSVJFU19GVU5DVElPTicpO1xuICAgIH1cbiAgICB0aGlzW0xJU1RFTkVSU10ucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBwcm9taXNlc1xuICAgKi9cbiAgc3RhdGljIGFsbChwcm9taXNlcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkocHJvbWlzZXMubGVuZ3RoKTtcbiAgICBjb25zdCBsZW5ndGggPSBwcm9taXNlcy5sZW5ndGg7XG4gICAgbGV0IHJlc29sdmVDb3VudCA9IDA7XG5cbiAgICByZXR1cm4gbmV3IFByb2dyZXNzUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0LCBwcm9ncmVzcykgPT4ge1xuICAgICAgcHJvbWlzZXMuZm9yRWFjaCgocHJvbWlzZSwgaW5kZXgpID0+IHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHJlc3VsdHMucHJvcG9ydGlvbiA9ICsrcmVzb2x2ZUNvdW50IC8gbGVuZ3RoO1xuICAgICAgICAgICAgcHJvZ3Jlc3MocmVzdWx0cyk7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZUNvdW50ID09PSBsZW5ndGgpIHJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGlucHV0c1xuICAgKiBAcGFyYW0geyp9IGhhbmRsZXJcbiAgICovXG4gIHN0YXRpYyBzZXF1ZW5jZShpbnB1dHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gaW5wdXRzLmxlbmd0aDtcbiAgICBsZXQgcmVzb2x2ZUNvdW50ID0gMDtcblxuICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NQcm9taXNlKChyZXNvbHZlLCByZWplY3QsIHByb2dyZXNzKSA9PiB7XG4gICAgICBmdW5jdGlvbiBpbnZva2VOZXh0KCkge1xuICAgICAgICBoYW5kbGVyXG4gICAgICAgICAgLmNhbGwobnVsbCwgaW5wdXRzW3Jlc3VsdHMubGVuZ3RoXSlcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICByZXN1bHRzLnByb3BvcnRpb24gPSArK3Jlc29sdmVDb3VudCAvIGxlbmd0aDtcbiAgICAgICAgICAgIHByb2dyZXNzKHJlc3VsdHMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSBsZW5ndGgpIHJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICBlbHNlIGludm9rZU5leHQoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfVxuICAgICAgaW52b2tlTmV4dCgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBSdW5uZXIgfSBmcm9tICcuL3J1bm5lcic7XG5pbXBvcnQgeyBGZXRjaGVyIH0gZnJvbSAnLi9mZXRjaGVyJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBtdWx0aXBsZSBmZXRjaGVyIHByb2Nlc3NcbiAqQGV4dGVuZHMgRmV0Y2hlclxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlGZXRjaGVyIGV4dGVuZHMgRmV0Y2hlciB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmZXRoY2VyXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoZmV0Y2hlcnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZldGNoZXJzID0gZmV0Y2hlcnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgRmV0Y2hlcnNcbiAgICogQHJldHVybnMge2FycmF5fSBmZXRjaGVycyAtIEFycmF5IG9mIEZldGNoZXJzXG4gICAqL1xuICBnZXQgZmV0Y2hlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGV4ZWN1dGVkIFByb21pc2VcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX0gcHJvZ3Jlc3NQcm9taXNlIC0gUHJvbWlzZSB3aGljaCBhbGVydHMgcHJvZ3Jlc3NzXG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIChuZXcgUnVubmVyKCkpLmdldEFsbFJlc3VsdHModGhpcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7QW5hbHl0aWNzfSBmcm9tICcuL21vZGVsL2FuYWx5dGljcy5qcyc7XG5pbXBvcnQge0FuYWx5dGljc1Jlc3VsdCB9IGZyb20gJy4vcmVzdWx0L2FuYWx5dGljcy1yZXN1bHQnO1xuaW1wb3J0IHtFdmVudEFuYWx5dGljc30gZnJvbSAnLi9tb2RlbC9ldmVudC1hbmFseXRpY3MnO1xuaW1wb3J0IHtTUUxWaWV3RGF0YX0gZnJvbSAnLi9tb2RlbC9zcWwtdmlldy5qcyc7XG5pbXBvcnQge1Byb2dyZXNzUHJvbWlzZX0gZnJvbSAnLi91dGlsaXRpZXMvcHJvZ3Jlc3MtcHJvbWlzZSc7XG5pbXBvcnQge1J1bm5lcn0gZnJvbSAnLi91dGlsaXRpZXMvcnVubmVyLmpzJztcbmltcG9ydCB7RGVwZW5kZW5jeX0gZnJvbSAnLi91dGlsaXRpZXMvZGVwZW5kZW5jeSc7XG5pbXBvcnQge011bHRpRmV0Y2hlcn0gZnJvbSAnLi91dGlsaXRpZXMvbXVsdGktZmV0Y2hlcic7XG5pbXBvcnQge0lkZW50aWZpYWJsZU9iamVjdH0gZnJvbSAnLi9tb2RlbC9pZGVudGlmaWFibGUtb2JqZWN0LmpzJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIGhvbGRlciBmb3IgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiB0aGUgZnVuY3Rpb25cbiAqIEB0eXBlIHt7UHJvbWlzZTogUHJvZ3Jlc3NQcm9taXNlLCBBbmFseXRpY3M6IEFuYWx5dGljcyxcbiAgKiAgIEFuYWx5dGljc1Jlc3VsdDogQW5hbHl0aWNzUmVzdWx0LFxuICAqICAgT3JnYW5pc2F0aW9uVW5pdDogT3JnYW5pc2F0aW9uVW5pdCwgU1FMVmlld0RhdGE6IFNRTFZpZXdEYXRhLFxuICAqICAgUnVubmVyOiBSdW5uZXIsIERlcGVuZGVuY3k6IERlcGVuZGVuY3ksIE11bHRpRmV0Y2hlcjogTXVsdGlGZXRjaGVyLFxuICAqICAgYWxsOiAoZnVuY3Rpb24oRmV0Y2hlcltdKSksIGluaXQ6IChmdW5jdGlvbigqPSkpfVxuICAqIH1cbiAqL1xubGV0IEZuID0ge1xuICBQcm9taXNlOiBQcm9ncmVzc1Byb21pc2UsXG4gIEFuYWx5dGljczogQW5hbHl0aWNzLFxuICBFdmVudEFuYWx5dGljczogRXZlbnRBbmFseXRpY3MsXG4gIEFuYWx5dGljc1Jlc3VsdDogQW5hbHl0aWNzUmVzdWx0LFxuICBJZGVudGlmaWFibGVPYmplY3Q6IElkZW50aWZpYWJsZU9iamVjdCxcbiAgU1FMVmlld0RhdGE6IFNRTFZpZXdEYXRhLFxuICBSdW5uZXI6IFJ1bm5lcixcbiAgRGVwZW5kZW5jeTogRGVwZW5kZW5jeSxcbiAgTXVsdGlGZXRjaGVyOiBNdWx0aUZldGNoZXIsXG4gIC8qKlxuICAgKiBBZGRzIG11bHRpcGxlIGZldGNoZXJzIGluIHF1ZXVlIGZvciBleGVjdXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RmV0Y2hlcltdfSBmZXRjaGVycyAtIFRoZSBmZXRoZXJzIGlzIGFuIGFycmF5IG9mIHRoZSBmZXRjaGVyc1xuICAgKiBAcmV0dXJucyB7UHJvZ3Jlc3NQcm9taXNlfSAtIFByb2dyZXNzIFByb21pc2UgZm9yIGZldGNoaW5nIHRoZSB2YXJpb3VzIGZldGNoZXJzXG4gICAqIEBleGFtcGxlXG4gICAqIEZuLmFsbChbbmV3IEZuLkFuYWx5dGljcygpLCBuZXcgRm4uT3JnYW5pc2F0aW9uVW5pdCgpXSk7XG4gICAqL1xuICBhbGw6IGZldGNoZXJzID0+IHtcbiAgICByZXR1cm4gbmV3IE11bHRpRmV0Y2hlcihmZXRjaGVycyk7XG4gIH0sXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBydW5uaW5nIGVudmlyb25tZW50IHBhcmFtZXRlcnNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ3VyYXRpb24gLSBUaGUgZmV0aGVycyBpcyBhbiBhcnJheSBvZiB0aGUgZmV0Y2hlcnNcbiAgICogQHJldHVybnMge1Byb2dyZXNzUHJvbWlzZX0gLSBQcm9ncmVzcyBQcm9taXNlIGZvciBmZXRjaGluZyB0aGUgdmFyaW91cyBmZXRjaGVyc1xuICAgKiBAZXhhbXBsZVxuICAgKiBGbi5hbGwoe2Jhc2VVcmw6Jyd9KTtcbiAgICovXG4gIGluaXQ6IGNvbmZpZyA9PiB7XG4gICAgUnVubmVyLmluaXRpYXRlUnVubmVyKGNvbmZpZyk7XG4gIH1cbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuRm4gPSBGbjtcbn1cbmV4cG9ydCB7IEZuIH07XG4iLCJpbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tICcuL2FuYWx5dGljcyc7XG5cbi8qKlxuICogVGhpcyByZXByZXNlbnRzIHRoZSBFdmVudCBBbmFseXRpY3MgRmV0Y2hlciBmb3IgcHJvY2Vzc2luZyBhbmFseXRpY3MgY2FsbHNcbiAqXG4gKiBAZXh0ZW5kcyBGZXRjaGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudEFuYWx5dGljcyBleHRlbmRzIEFuYWx5dGljcyB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBQcm9ncmFtIGZvciB0aGUgZmV0Y2hcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICogQHJldHVybnMge0V2ZW50QW5hbHl0aWNzfVxuICAgKi9cbiAgc2V0UHJvZ3JhbShwcm9ncmFtKSB7XG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgdXJsIGZvciBmZXRjaGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gJ2FuYWx5dGljcy9ldmVudHMvcXVlcnkvJyArIHRoaXMucHJvZ3JhbSArICc/JyArIHRoaXMuX3VybFBhcmFtZXRlcnM7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZldGNoZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvZmV0Y2hlcic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBJZGVudGlmaWFibGUgT2JqZWN0XG4gKkBleHRlbmRzIEZldGNoZXJcbiAqL1xuZXhwb3J0IGNsYXNzIElkZW50aWZpYWJsZU9iamVjdCBleHRlbmRzIEZldGNoZXIge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZmV0aGNlclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9iamVjdE5hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZpbHRlcnMgPSBbXTtcbiAgICB0aGlzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xuICB9XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdE5hbWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgd2hlcmUgY2xhdXNlIGZvciBmaWx0ZXJpbmcgb2YgZGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmlnaHQgLSBSaWdodCBleHByZXNzaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcGVyYXRvciAtIEV4cHJlc3Npb24gb3BlcmF0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IGxlZnQgLSBSaWdodCBleHByZXNzaW9uXG4gICAqIEByZXR1cm5zIHtJZGVudGlmaWFibGVPYmplY3R9IElkZW50aWZpYWJsZU9iamVjdCBJZGVudGlmaWFibGUgb2JqZWN0IHdpdGggd2hlcmUgY2xhdXNlIGFwcGVuZGVkXG4gICAqL1xuICB3aGVyZShyaWdodCwgb3BlcmF0b3IsIGxlZnQpIHtcbiAgICB0aGlzLl9maWx0ZXJzLnB1c2goe1xuICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgICAgbGVmdDogbGVmdFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IHVybCgpIHtcbiAgICB2YXIgdXJsID0gdGhpcy5fdXJsUGFyYW1ldGVycztcblxuICAgIHRoaXMuX2ZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAodXJsICE9PSAnJykge1xuICAgICAgICB1cmwgKz0gJyYnO1xuICAgICAgfVxuICAgICAgdXJsICs9ICdmaWx0ZXI9JyArIGZpbHRlci5yaWdodDtcbiAgICAgIGlmIChmaWx0ZXIub3BlcmF0b3IgPT09ICc9PScpIHtcbiAgICAgICAgdXJsICs9ICc6ZXE6JyArIGZpbHRlci5sZWZ0O1xuICAgICAgfSBlbHNlIGlmIChmaWx0ZXIub3BlcmF0b3IgPT09ICc8Jykge1xuICAgICAgICB1cmwgKz0gJzpsdDonICsgZmlsdGVyLmxlZnQ7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gJzw9Jykge1xuICAgICAgICB1cmwgKz0gJzpsZTonICsgZmlsdGVyLmxlZnQ7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gJz4nKSB7XG4gICAgICAgIHVybCArPSAnOmd0OicgKyBmaWx0ZXIubGVmdDtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm9wZXJhdG9yID09PSAnPj0nKSB7XG4gICAgICAgIHVybCArPSAnOmdlOicgKyBmaWx0ZXIubGVmdDtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm9wZXJhdG9yID09PSAnPD4nKSB7XG4gICAgICAgIHVybCArPSAnOiFlcTonICsgZmlsdGVyLmxlZnQ7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gJ2luJyB8fCBmaWx0ZXIub3BlcmF0b3IgPT09ICchaW4nKSB7XG4gICAgICAgIHVybCArPSAnOicgKyBmaWx0ZXIub3BlcmF0b3IgKyAnOlsnICsgZmlsdGVyLmxlZnQgKyAnXSc7XG4gICAgICB9IGVsc2UgaWYgKCFmaWx0ZXIubGVmdCkge1xuICAgICAgICB1cmwgKz0gJzonICsgZmlsdGVyLm9wZXJhdG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsICs9ICc6JyArIGZpbHRlci5vcGVyYXRvciArICc6JyArIGZpbHRlci5sZWZ0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnLmpzb24/JyArIHVybDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRmV0Y2hlciB9IGZyb20gJy4uL3V0aWxpdGllcy9mZXRjaGVyJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZmV0Y2hlciB0byBsb2FkIHNxbCB2aWV3IGRhdGFcbiAqXG4gKiBAZXh0ZW5kcyBGZXRjaGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBTUUxWaWV3RGF0YSBleHRlbmRzIEZldGNoZXIge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBTUUxWaWV3RGF0YSBJbnN0YW5jZVxuICAgKiBAcGFyYW0gaWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9pZCA9IGlkO1xuICAgIHRoaXMucGFyYW1ldGVyc1sndmFyJ10gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaW1lbnNpb24gZm9yIHRoZSBmZXRjaGluZyBvZiB0aGUgYW5hbHl0aWNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaW0gLSBEeW5hbWljIERpbWVuc2lvbiBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIER5bmFtaWMgZGltZW5zaW9uIG9wdGlvbnMgaWRlbnRpZmllcnNcbiAgICogQHJldHVybnMge0FuYWx5dGljc31cbiAgICovXG4gIHNldFZhcmlhYmxlKHZhcmlhYmxlLCB2YWx1ZSkge1xuICAgIHRoaXMucGFyYW1ldGVyc1sndmFyJ11bdmFyaWFibGVdID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1cmwgZm9yIGZldGNoaW5nXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdXJsKCkge1xuICAgIGxldCB1cmwgPSAnc3FsVmlld3MvJyArIHRoaXMuX2lkICsgJy9kYXRhLmpzb24/JyArIHRoaXMuX3VybFBhcmFtZXRlcnM7XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG4iLCIvKipcbiAqIFRoaXMgY2FsbGJhY2sgdHlwZSBpcyBjYWxsZWQgYHByb2Nlc3NDYWxsYmFja2AuXG4gKlxuICogQGNhbGxiYWNrIHByb2Nlc3NDYWxsYmFja1xuICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdFxuICovXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHByb2Nlc3MgZGVwZW5kZW5jeVxuICovXG5leHBvcnQgY2xhc3MgRGVwZW5kZW5jeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZGVwZW5kZW5jeSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb2Nlc3N9IHByb2Nlc3NcbiAgICogQHBhcmFtIHtwcm9jZXNzQ2FsbGJhY2t9IHByb2Nlc3NDYWxsYmFja1xuICAgKi9cbiAgY29uc3RydWN0b3IocHJvY2VzcywgcHJvY2Vzc0NhbGxiYWNrKSB7XG4gICAgdGhpcy5wcm9jZXNzID0gcHJvY2VzcztcbiAgICB0aGlzLnByb2Nlc3NDYWxsYmFjayA9IHByb2Nlc3NDYWxsYmFjaztcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==